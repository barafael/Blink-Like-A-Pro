
blinky-DMA-BSRR-BRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080020d8  080020d8  000120d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020fc  080020fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080020fc  080020fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020fc  080020fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020fc  080020fc  000120fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002100  08002100  00012100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002110  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002110  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d422  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b77  00000000  00000000  0002d457  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000938  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002f908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e85  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076e8  00000000  00000000  0004500d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006faae  00000000  00000000  0004c6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc1a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002588  00000000  00000000  000bc220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020c0 	.word	0x080020c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020c0 	.word	0x080020c0

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fde8 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
 800047c:	e043      	b.n	8000506 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	461a      	mov	r2, r3
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <HAL_DMA_Init+0xa8>)
 8000486:	4413      	add	r3, r2
 8000488:	4a22      	ldr	r2, [pc, #136]	; (8000514 <HAL_DMA_Init+0xac>)
 800048a:	fba2 2303 	umull	r2, r3, r2, r3
 800048e:	091b      	lsrs	r3, r3, #4
 8000490:	009a      	lsls	r2, r3, #2
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <HAL_DMA_Init+0xb0>)
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2202      	movs	r2, #2
 80004a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	bffdfff8 	.word	0xbffdfff8
 8000514:	cccccccd 	.word	0xcccccccd
 8000518:	40020000 	.word	0x40020000

0800051c <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800052a:	2300      	movs	r3, #0
 800052c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d101      	bne.n	800053c <HAL_DMA_Start+0x20>
 8000538:	2302      	movs	r3, #2
 800053a:	e02d      	b.n	8000598 <HAL_DMA_Start+0x7c>
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2201      	movs	r2, #1
 8000540:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800054a:	2b01      	cmp	r3, #1
 800054c:	d11d      	bne.n	800058a <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2202      	movs	r2, #2
 8000552:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	2200      	movs	r2, #0
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f022 0201 	bic.w	r2, r2, #1
 800056a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	68b9      	ldr	r1, [r7, #8]
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f000 f91a 	bl	80007ac <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f042 0201 	orr.w	r2, r2, #1
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	e005      	b.n	8000596 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8000592:	2302      	movs	r3, #2
 8000594:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8000596:	7dfb      	ldrb	r3, [r7, #23]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	2204      	movs	r2, #4
 80005be:	409a      	lsls	r2, r3
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4013      	ands	r3, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d04f      	beq.n	8000668 <HAL_DMA_IRQHandler+0xc8>
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d04a      	beq.n	8000668 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d107      	bne.n	80005f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0204 	bic.w	r2, r2, #4
 80005ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a66      	ldr	r2, [pc, #408]	; (8000790 <HAL_DMA_IRQHandler+0x1f0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d029      	beq.n	800064e <HAL_DMA_IRQHandler+0xae>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a65      	ldr	r2, [pc, #404]	; (8000794 <HAL_DMA_IRQHandler+0x1f4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d022      	beq.n	800064a <HAL_DMA_IRQHandler+0xaa>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a63      	ldr	r2, [pc, #396]	; (8000798 <HAL_DMA_IRQHandler+0x1f8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d01a      	beq.n	8000644 <HAL_DMA_IRQHandler+0xa4>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a62      	ldr	r2, [pc, #392]	; (800079c <HAL_DMA_IRQHandler+0x1fc>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d012      	beq.n	800063e <HAL_DMA_IRQHandler+0x9e>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a60      	ldr	r2, [pc, #384]	; (80007a0 <HAL_DMA_IRQHandler+0x200>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00a      	beq.n	8000638 <HAL_DMA_IRQHandler+0x98>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a5f      	ldr	r2, [pc, #380]	; (80007a4 <HAL_DMA_IRQHandler+0x204>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d102      	bne.n	8000632 <HAL_DMA_IRQHandler+0x92>
 800062c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000630:	e00e      	b.n	8000650 <HAL_DMA_IRQHandler+0xb0>
 8000632:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000636:	e00b      	b.n	8000650 <HAL_DMA_IRQHandler+0xb0>
 8000638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800063c:	e008      	b.n	8000650 <HAL_DMA_IRQHandler+0xb0>
 800063e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000642:	e005      	b.n	8000650 <HAL_DMA_IRQHandler+0xb0>
 8000644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000648:	e002      	b.n	8000650 <HAL_DMA_IRQHandler+0xb0>
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	e000      	b.n	8000650 <HAL_DMA_IRQHandler+0xb0>
 800064e:	2304      	movs	r3, #4
 8000650:	4a55      	ldr	r2, [pc, #340]	; (80007a8 <HAL_DMA_IRQHandler+0x208>)
 8000652:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000658:	2b00      	cmp	r3, #0
 800065a:	f000 8094 	beq.w	8000786 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000666:	e08e      	b.n	8000786 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	2202      	movs	r2, #2
 800066e:	409a      	lsls	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4013      	ands	r3, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d056      	beq.n	8000726 <HAL_DMA_IRQHandler+0x186>
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d051      	beq.n	8000726 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 0320 	and.w	r3, r3, #32
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10b      	bne.n	80006a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f022 020a 	bic.w	r2, r2, #10
 800069e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2201      	movs	r2, #1
 80006a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <HAL_DMA_IRQHandler+0x1f0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d029      	beq.n	8000706 <HAL_DMA_IRQHandler+0x166>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <HAL_DMA_IRQHandler+0x1f4>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d022      	beq.n	8000702 <HAL_DMA_IRQHandler+0x162>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a35      	ldr	r2, [pc, #212]	; (8000798 <HAL_DMA_IRQHandler+0x1f8>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d01a      	beq.n	80006fc <HAL_DMA_IRQHandler+0x15c>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a34      	ldr	r2, [pc, #208]	; (800079c <HAL_DMA_IRQHandler+0x1fc>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d012      	beq.n	80006f6 <HAL_DMA_IRQHandler+0x156>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a32      	ldr	r2, [pc, #200]	; (80007a0 <HAL_DMA_IRQHandler+0x200>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d00a      	beq.n	80006f0 <HAL_DMA_IRQHandler+0x150>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <HAL_DMA_IRQHandler+0x204>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d102      	bne.n	80006ea <HAL_DMA_IRQHandler+0x14a>
 80006e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80006e8:	e00e      	b.n	8000708 <HAL_DMA_IRQHandler+0x168>
 80006ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ee:	e00b      	b.n	8000708 <HAL_DMA_IRQHandler+0x168>
 80006f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006f4:	e008      	b.n	8000708 <HAL_DMA_IRQHandler+0x168>
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	e005      	b.n	8000708 <HAL_DMA_IRQHandler+0x168>
 80006fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000700:	e002      	b.n	8000708 <HAL_DMA_IRQHandler+0x168>
 8000702:	2320      	movs	r3, #32
 8000704:	e000      	b.n	8000708 <HAL_DMA_IRQHandler+0x168>
 8000706:	2302      	movs	r3, #2
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <HAL_DMA_IRQHandler+0x208>)
 800070a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000718:	2b00      	cmp	r3, #0
 800071a:	d034      	beq.n	8000786 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000724:	e02f      	b.n	8000786 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	2208      	movs	r2, #8
 800072c:	409a      	lsls	r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4013      	ands	r3, r2
 8000732:	2b00      	cmp	r3, #0
 8000734:	d028      	beq.n	8000788 <HAL_DMA_IRQHandler+0x1e8>
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	2b00      	cmp	r3, #0
 800073e:	d023      	beq.n	8000788 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 020e 	bic.w	r2, r2, #14
 800074e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000758:	2101      	movs	r1, #1
 800075a:	fa01 f202 	lsl.w	r2, r1, r2
 800075e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2201      	movs	r2, #1
 800076a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	4798      	blx	r3
    }
  }
  return;
 8000786:	bf00      	nop
 8000788:	bf00      	nop
}
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40020008 	.word	0x40020008
 8000794:	4002001c 	.word	0x4002001c
 8000798:	40020030 	.word	0x40020030
 800079c:	40020044 	.word	0x40020044
 80007a0:	40020058 	.word	0x40020058
 80007a4:	4002006c 	.word	0x4002006c
 80007a8:	40020000 	.word	0x40020000

080007ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	2b10      	cmp	r3, #16
 80007d8:	d108      	bne.n	80007ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80007ea:	e007      	b.n	80007fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
	...

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b08b      	sub	sp, #44	; 0x2c
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e127      	b.n	8000a7c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800082c:	2201      	movs	r2, #1
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8116 	bne.w	8000a76 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d034      	beq.n	80008bc <HAL_GPIO_Init+0xb4>
 8000852:	2b12      	cmp	r3, #18
 8000854:	d80d      	bhi.n	8000872 <HAL_GPIO_Init+0x6a>
 8000856:	2b02      	cmp	r3, #2
 8000858:	d02b      	beq.n	80008b2 <HAL_GPIO_Init+0xaa>
 800085a:	2b02      	cmp	r3, #2
 800085c:	d804      	bhi.n	8000868 <HAL_GPIO_Init+0x60>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d031      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
 8000862:	2b01      	cmp	r3, #1
 8000864:	d01c      	beq.n	80008a0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000866:	e048      	b.n	80008fa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000868:	2b03      	cmp	r3, #3
 800086a:	d043      	beq.n	80008f4 <HAL_GPIO_Init+0xec>
 800086c:	2b11      	cmp	r3, #17
 800086e:	d01b      	beq.n	80008a8 <HAL_GPIO_Init+0xa0>
          break;
 8000870:	e043      	b.n	80008fa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000872:	4a87      	ldr	r2, [pc, #540]	; (8000a90 <HAL_GPIO_Init+0x288>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d026      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
 8000878:	4a85      	ldr	r2, [pc, #532]	; (8000a90 <HAL_GPIO_Init+0x288>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d806      	bhi.n	800088c <HAL_GPIO_Init+0x84>
 800087e:	4a85      	ldr	r2, [pc, #532]	; (8000a94 <HAL_GPIO_Init+0x28c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d020      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
 8000884:	4a84      	ldr	r2, [pc, #528]	; (8000a98 <HAL_GPIO_Init+0x290>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d01d      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
          break;
 800088a:	e036      	b.n	80008fa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800088c:	4a83      	ldr	r2, [pc, #524]	; (8000a9c <HAL_GPIO_Init+0x294>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d019      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
 8000892:	4a83      	ldr	r2, [pc, #524]	; (8000aa0 <HAL_GPIO_Init+0x298>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d016      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
 8000898:	4a82      	ldr	r2, [pc, #520]	; (8000aa4 <HAL_GPIO_Init+0x29c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d013      	beq.n	80008c6 <HAL_GPIO_Init+0xbe>
          break;
 800089e:	e02c      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e028      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e023      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	3308      	adds	r3, #8
 80008b8:	623b      	str	r3, [r7, #32]
          break;
 80008ba:	e01e      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	330c      	adds	r3, #12
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	e019      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ce:	2304      	movs	r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e012      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008dc:	2308      	movs	r3, #8
 80008de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	611a      	str	r2, [r3, #16]
          break;
 80008e6:	e008      	b.n	80008fa <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e8:	2308      	movs	r3, #8
 80008ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	615a      	str	r2, [r3, #20]
          break;
 80008f2:	e002      	b.n	80008fa <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d801      	bhi.n	8000904 <HAL_GPIO_Init+0xfc>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	e001      	b.n	8000908 <HAL_GPIO_Init+0x100>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3304      	adds	r3, #4
 8000908:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	2bff      	cmp	r3, #255	; 0xff
 800090e:	d802      	bhi.n	8000916 <HAL_GPIO_Init+0x10e>
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	e002      	b.n	800091c <HAL_GPIO_Init+0x114>
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	3b08      	subs	r3, #8
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	210f      	movs	r1, #15
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	6a39      	ldr	r1, [r7, #32]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	431a      	orrs	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 8096 	beq.w	8000a76 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <HAL_GPIO_Init+0x2a0>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a56      	ldr	r2, [pc, #344]	; (8000aa8 <HAL_GPIO_Init+0x2a0>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b54      	ldr	r3, [pc, #336]	; (8000aa8 <HAL_GPIO_Init+0x2a0>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000962:	4a52      	ldr	r2, [pc, #328]	; (8000aac <HAL_GPIO_Init+0x2a4>)
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	4013      	ands	r3, r2
 8000984:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a49      	ldr	r2, [pc, #292]	; (8000ab0 <HAL_GPIO_Init+0x2a8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x1ae>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a48      	ldr	r2, [pc, #288]	; (8000ab4 <HAL_GPIO_Init+0x2ac>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x1aa>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a47      	ldr	r2, [pc, #284]	; (8000ab8 <HAL_GPIO_Init+0x2b0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x1a6>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a46      	ldr	r2, [pc, #280]	; (8000abc <HAL_GPIO_Init+0x2b4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x1a2>
 80009a6:	2303      	movs	r3, #3
 80009a8:	e006      	b.n	80009b8 <HAL_GPIO_Init+0x1b0>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e004      	b.n	80009b8 <HAL_GPIO_Init+0x1b0>
 80009ae:	2302      	movs	r3, #2
 80009b0:	e002      	b.n	80009b8 <HAL_GPIO_Init+0x1b0>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <HAL_GPIO_Init+0x1b0>
 80009b6:	2300      	movs	r3, #0
 80009b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ba:	f002 0203 	and.w	r2, r2, #3
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	4093      	lsls	r3, r2
 80009c2:	697a      	ldr	r2, [r7, #20]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80009c8:	4938      	ldr	r1, [pc, #224]	; (8000aac <HAL_GPIO_Init+0x2a4>)
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	3302      	adds	r3, #2
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4936      	ldr	r1, [pc, #216]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f0:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4931      	ldr	r1, [pc, #196]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 80009fa:	4013      	ands	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d006      	beq.n	8000a18 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	492c      	ldr	r1, [pc, #176]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	604b      	str	r3, [r1, #4]
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a18:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	4927      	ldr	r1, [pc, #156]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	4922      	ldr	r1, [pc, #136]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	608b      	str	r3, [r1, #8]
 8000a3e:	e006      	b.n	8000a4e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	491d      	ldr	r1, [pc, #116]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d006      	beq.n	8000a68 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	4918      	ldr	r1, [pc, #96]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60cb      	str	r3, [r1, #12]
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4913      	ldr	r1, [pc, #76]	; (8000ac0 <HAL_GPIO_Init+0x2b8>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	3301      	adds	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	f67f aed4 	bls.w	800082c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000a84:	bf00      	nop
 8000a86:	372c      	adds	r7, #44	; 0x2c
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	10210000 	.word	0x10210000
 8000a94:	10110000 	.word	0x10110000
 8000a98:	10120000 	.word	0x10120000
 8000a9c:	10310000 	.word	0x10310000
 8000aa0:	10320000 	.word	0x10320000
 8000aa4:	10220000 	.word	0x10220000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40011400 	.word	0x40011400
 8000ac0:	40010400 	.word	0x40010400

08000ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	807b      	strh	r3, [r7, #2]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ada:	887a      	ldrh	r2, [r7, #2]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ae0:	e003      	b.n	8000aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	041a      	lsls	r2, r3, #16
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	611a      	str	r2, [r3, #16]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 8087 	beq.w	8000c1c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b0e:	4b92      	ldr	r3, [pc, #584]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d00c      	beq.n	8000b34 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b1a:	4b8f      	ldr	r3, [pc, #572]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d112      	bne.n	8000b4c <HAL_RCC_OscConfig+0x58>
 8000b26:	4b8c      	ldr	r3, [pc, #560]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b32:	d10b      	bne.n	8000b4c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b34:	4b88      	ldr	r3, [pc, #544]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d06c      	beq.n	8000c1a <HAL_RCC_OscConfig+0x126>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d168      	bne.n	8000c1a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e22d      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b54:	d106      	bne.n	8000b64 <HAL_RCC_OscConfig+0x70>
 8000b56:	4b80      	ldr	r3, [pc, #512]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a7f      	ldr	r2, [pc, #508]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e02e      	b.n	8000bc2 <HAL_RCC_OscConfig+0xce>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10c      	bne.n	8000b86 <HAL_RCC_OscConfig+0x92>
 8000b6c:	4b7a      	ldr	r3, [pc, #488]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a79      	ldr	r2, [pc, #484]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b77      	ldr	r3, [pc, #476]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a76      	ldr	r2, [pc, #472]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e01d      	b.n	8000bc2 <HAL_RCC_OscConfig+0xce>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b8e:	d10c      	bne.n	8000baa <HAL_RCC_OscConfig+0xb6>
 8000b90:	4b71      	ldr	r3, [pc, #452]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a70      	ldr	r2, [pc, #448]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b6e      	ldr	r3, [pc, #440]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a6d      	ldr	r2, [pc, #436]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e00b      	b.n	8000bc2 <HAL_RCC_OscConfig+0xce>
 8000baa:	4b6b      	ldr	r3, [pc, #428]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a6a      	ldr	r2, [pc, #424]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b68      	ldr	r3, [pc, #416]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a67      	ldr	r2, [pc, #412]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d013      	beq.n	8000bf2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bca:	f7ff fb17 	bl	80001fc <HAL_GetTick>
 8000bce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd2:	f7ff fb13 	bl	80001fc <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b64      	cmp	r3, #100	; 0x64
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e1e1      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be4:	4b5c      	ldr	r3, [pc, #368]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f0      	beq.n	8000bd2 <HAL_RCC_OscConfig+0xde>
 8000bf0:	e014      	b.n	8000c1c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fb03 	bl	80001fc <HAL_GetTick>
 8000bf6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bfa:	f7ff faff 	bl	80001fc <HAL_GetTick>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2b64      	cmp	r3, #100	; 0x64
 8000c06:	d901      	bls.n	8000c0c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e1cd      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0c:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1f0      	bne.n	8000bfa <HAL_RCC_OscConfig+0x106>
 8000c18:	e000      	b.n	8000c1c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d063      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c28:	4b4b      	ldr	r3, [pc, #300]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 030c 	and.w	r3, r3, #12
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d00b      	beq.n	8000c4c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c34:	4b48      	ldr	r3, [pc, #288]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 030c 	and.w	r3, r3, #12
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d11c      	bne.n	8000c7a <HAL_RCC_OscConfig+0x186>
 8000c40:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d116      	bne.n	8000c7a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4c:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <HAL_RCC_OscConfig+0x170>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d001      	beq.n	8000c64 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e1a1      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c64:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4939      	ldr	r1, [pc, #228]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000c74:	4313      	orrs	r3, r2
 8000c76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	e03a      	b.n	8000cf0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d020      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <HAL_RCC_OscConfig+0x268>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fab8 	bl	80001fc <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fab4 	bl	80001fc <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e182      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cae:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4926      	ldr	r1, [pc, #152]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
 8000cc2:	e015      	b.n	8000cf0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <HAL_RCC_OscConfig+0x268>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cca:	f7ff fa97 	bl	80001fc <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fa93 	bl	80001fc <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e161      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d1f0      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d039      	beq.n	8000d70 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d019      	beq.n	8000d38 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0a:	f7ff fa77 	bl	80001fc <HAL_GetTick>
 8000d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d12:	f7ff fa73 	bl	80001fc <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e141      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_RCC_OscConfig+0x264>)
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0f0      	beq.n	8000d12 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f000 fab1 	bl	8001298 <RCC_Delay>
 8000d36:	e01b      	b.n	8000d70 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d3e:	f7ff fa5d 	bl	80001fc <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d44:	e00e      	b.n	8000d64 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d46:	f7ff fa59 	bl	80001fc <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d907      	bls.n	8000d64 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e127      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	42420000 	.word	0x42420000
 8000d60:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	4b92      	ldr	r3, [pc, #584]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1ea      	bne.n	8000d46 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80a6 	beq.w	8000eca <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b8b      	ldr	r3, [pc, #556]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10d      	bne.n	8000daa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b88      	ldr	r3, [pc, #544]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a87      	ldr	r2, [pc, #540]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b85      	ldr	r3, [pc, #532]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000daa:	4b82      	ldr	r3, [pc, #520]	; (8000fb4 <HAL_RCC_OscConfig+0x4c0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d118      	bne.n	8000de8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db6:	4b7f      	ldr	r3, [pc, #508]	; (8000fb4 <HAL_RCC_OscConfig+0x4c0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7e      	ldr	r2, [pc, #504]	; (8000fb4 <HAL_RCC_OscConfig+0x4c0>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fa1b 	bl	80001fc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fa17 	bl	80001fc <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e0e5      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ddc:	4b75      	ldr	r3, [pc, #468]	; (8000fb4 <HAL_RCC_OscConfig+0x4c0>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x30a>
 8000df0:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a6e      	ldr	r2, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6213      	str	r3, [r2, #32]
 8000dfc:	e02d      	b.n	8000e5a <HAL_RCC_OscConfig+0x366>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x32c>
 8000e06:	4b6a      	ldr	r3, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	4a69      	ldr	r2, [pc, #420]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6213      	str	r3, [r2, #32]
 8000e12:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	4a66      	ldr	r2, [pc, #408]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e18:	f023 0304 	bic.w	r3, r3, #4
 8000e1c:	6213      	str	r3, [r2, #32]
 8000e1e:	e01c      	b.n	8000e5a <HAL_RCC_OscConfig+0x366>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x34e>
 8000e28:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4a60      	ldr	r2, [pc, #384]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6213      	str	r3, [r2, #32]
 8000e34:	4b5e      	ldr	r3, [pc, #376]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a5d      	ldr	r2, [pc, #372]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6213      	str	r3, [r2, #32]
 8000e40:	e00b      	b.n	8000e5a <HAL_RCC_OscConfig+0x366>
 8000e42:	4b5b      	ldr	r3, [pc, #364]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4a5a      	ldr	r2, [pc, #360]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6213      	str	r3, [r2, #32]
 8000e4e:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4a57      	ldr	r2, [pc, #348]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d015      	beq.n	8000e8e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff f9cb 	bl	80001fc <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff f9c7 	bl	80001fc <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e093      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	4b4b      	ldr	r3, [pc, #300]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ee      	beq.n	8000e6a <HAL_RCC_OscConfig+0x376>
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e8e:	f7ff f9b5 	bl	80001fc <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff f9b1 	bl	80001fc <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e07d      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	4b40      	ldr	r3, [pc, #256]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ee      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d105      	bne.n	8000eca <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a3b      	ldr	r2, [pc, #236]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d069      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed2:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d061      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d146      	bne.n	8000f74 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff f986 	bl	80001fc <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef4:	f7ff f982 	bl	80001fc <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e050      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f1a:	d108      	bne.n	8000f2e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	4921      	ldr	r1, [pc, #132]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a19      	ldr	r1, [r3, #32]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	491b      	ldr	r1, [pc, #108]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff f956 	bl	80001fc <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f54:	f7ff f952 	bl	80001fc <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e020      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0x460>
 8000f72:	e018      	b.n	8000fa6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff f93f 	bl	80001fc <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f82:	f7ff f93b 	bl	80001fc <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e009      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_RCC_OscConfig+0x4bc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f0      	bne.n	8000f82 <HAL_RCC_OscConfig+0x48e>
 8000fa0:	e001      	b.n	8000fa6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	42420060 	.word	0x42420060

08000fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fca:	4b7e      	ldr	r3, [pc, #504]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d910      	bls.n	8000ffa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd8:	4b7a      	ldr	r3, [pc, #488]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 0207 	bic.w	r2, r3, #7
 8000fe0:	4978      	ldr	r1, [pc, #480]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fe8:	4b76      	ldr	r3, [pc, #472]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d001      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0e0      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d020      	beq.n	8001048 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001012:	4b6d      	ldr	r3, [pc, #436]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a6c      	ldr	r2, [pc, #432]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001018:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800101c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800102a:	4b67      	ldr	r3, [pc, #412]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a66      	ldr	r2, [pc, #408]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001030:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001034:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001036:	4b64      	ldr	r3, [pc, #400]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4961      	ldr	r1, [pc, #388]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d06a      	beq.n	800112a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105c:	4b5a      	ldr	r3, [pc, #360]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d115      	bne.n	8001094 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0a7      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d107      	bne.n	8001084 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001074:	4b54      	ldr	r3, [pc, #336]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d109      	bne.n	8001094 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e09b      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e093      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f023 0203 	bic.w	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4949      	ldr	r1, [pc, #292]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a6:	f7ff f8a9 	bl	80001fc <HAL_GetTick>
 80010aa:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d112      	bne.n	80010da <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b4:	e00a      	b.n	80010cc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b6:	f7ff f8a1 	bl	80001fc <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e077      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010cc:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d1ee      	bne.n	80010b6 <HAL_RCC_ClockConfig+0xfa>
 80010d8:	e027      	b.n	800112a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d11d      	bne.n	800111e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e2:	e00a      	b.n	80010fa <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e4:	f7ff f88a 	bl	80001fc <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e060      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b08      	cmp	r3, #8
 8001104:	d1ee      	bne.n	80010e4 <HAL_RCC_ClockConfig+0x128>
 8001106:	e010      	b.n	800112a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001108:	f7ff f878 	bl	80001fc <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	f241 3288 	movw	r2, #5000	; 0x1388
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e04e      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1ee      	bne.n	8001108 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d210      	bcs.n	800115a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 0207 	bic.w	r2, r3, #7
 8001140:	4920      	ldr	r1, [pc, #128]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_RCC_ClockConfig+0x208>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d001      	beq.n	800115a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e030      	b.n	80011bc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	2b00      	cmp	r3, #0
 8001164:	d008      	beq.n	8001178 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4915      	ldr	r1, [pc, #84]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001198:	f000 f81c 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 800119c:	4601      	mov	r1, r0
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x20c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_RCC_ClockConfig+0x210>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	fa21 f303 	lsr.w	r3, r1, r3
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_RCC_ClockConfig+0x214>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7fe ffdf 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	080020ec 	.word	0x080020ec
 80011d0:	20000008 	.word	0x20000008

080011d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	b490      	push	{r4, r7}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011dc:	1d3c      	adds	r4, r7, #4
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011e4:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011fe:	4b23      	ldr	r3, [pc, #140]	; (800128c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b04      	cmp	r3, #4
 800120c:	d002      	beq.n	8001214 <HAL_RCC_GetSysClockFreq+0x40>
 800120e:	2b08      	cmp	r3, #8
 8001210:	d003      	beq.n	800121a <HAL_RCC_GetSysClockFreq+0x46>
 8001212:	e02d      	b.n	8001270 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001216:	623b      	str	r3, [r7, #32]
      break;
 8001218:	e02d      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	0c9b      	lsrs	r3, r3, #18
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001226:	4413      	add	r3, r2
 8001228:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800122c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HAL_RCC_GetSysClockFreq+0xb8>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	0c5b      	lsrs	r3, r3, #17
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001246:	4413      	add	r3, r2
 8001248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800124c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001252:	fb02 f203 	mul.w	r2, r2, r3
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	fbb2 f3f3 	udiv	r3, r2, r3
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
 800125e:	e004      	b.n	800126a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001264:	fb02 f303 	mul.w	r3, r2, r3
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	623b      	str	r3, [r7, #32]
      break;
 800126e:	e002      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001272:	623b      	str	r3, [r7, #32]
      break;
 8001274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001276:	6a3b      	ldr	r3, [r7, #32]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bc90      	pop	{r4, r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	080020d8 	.word	0x080020d8
 8001288:	080020e8 	.word	0x080020e8
 800128c:	40021000 	.word	0x40021000
 8001290:	007a1200 	.word	0x007a1200
 8001294:	003d0900 	.word	0x003d0900

08001298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <RCC_Delay+0x34>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <RCC_Delay+0x38>)
 80012a6:	fba2 2303 	umull	r2, r3, r2, r3
 80012aa:	0a5b      	lsrs	r3, r3, #9
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80012b4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	60fa      	str	r2, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <RCC_Delay+0x1c>
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	10624dd3 	.word	0x10624dd3

080012d4 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e01d      	b.n	8001322 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fd50 	bl	8001da0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3304      	adds	r3, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4610      	mov	r0, r2
 8001314:	f000 fa22 	bl	800175c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2202      	movs	r2, #2
 8001336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b02      	cmp	r3, #2
 8001372:	d122      	bne.n	80013ba <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b02      	cmp	r3, #2
 8001380:	d11b      	bne.n	80013ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f06f 0202 	mvn.w	r2, #2
 800138a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9c8 	bl	8001736 <HAL_TIM_IC_CaptureCallback>
 80013a6:	e005      	b.n	80013b4 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fde3 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fdf0 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d122      	bne.n	800140e <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d11b      	bne.n	800140e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0204 	mvn.w	r2, #4
 80013de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f99e 	bl	8001736 <HAL_TIM_IC_CaptureCallback>
 80013fa:	e005      	b.n	8001408 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fdb9 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fdc6 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b08      	cmp	r3, #8
 800141a:	d122      	bne.n	8001462 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11b      	bne.n	8001462 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 0208 	mvn.w	r2, #8
 8001432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2204      	movs	r2, #4
 8001438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f974 	bl	8001736 <HAL_TIM_IC_CaptureCallback>
 800144e:	e005      	b.n	800145c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fd8f 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fd9c 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b10      	cmp	r3, #16
 800146e:	d122      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b10      	cmp	r3, #16
 800147c:	d11b      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f06f 0210 	mvn.w	r2, #16
 8001486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2208      	movs	r2, #8
 800148c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f94a 	bl	8001736 <HAL_TIM_IC_CaptureCallback>
 80014a2:	e005      	b.n	80014b0 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 fd65 	bl	8001f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 fd72 	bl	8001f94 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10e      	bne.n	80014e2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f06f 0201 	mvn.w	r2, #1
 80014da:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f921 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	2b80      	cmp	r3, #128	; 0x80
 80014ee:	d10e      	bne.n	800150e <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fa:	2b80      	cmp	r3, #128	; 0x80
 80014fc:	d107      	bne.n	800150e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001506:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fa7f 	bl	8001a0c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001518:	2b40      	cmp	r3, #64	; 0x40
 800151a:	d10e      	bne.n	800153a <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	2b40      	cmp	r3, #64	; 0x40
 8001528:	d107      	bne.n	800153a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001532:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f907 	bl	8001748 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f003 0320 	and.w	r3, r3, #32
 8001544:	2b20      	cmp	r3, #32
 8001546:	d10e      	bne.n	8001566 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	2b20      	cmp	r3, #32
 8001554:	d107      	bne.n	8001566 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 0220 	mvn.w	r2, #32
 800155e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fa4a 	bl	80019fa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_TIM_ConfigClockSource+0x1c>
 8001586:	2302      	movs	r3, #2
 8001588:	e0c8      	b.n	800171c <HAL_TIM_ConfigClockSource+0x1ae>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80015a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b40      	cmp	r3, #64	; 0x40
 80015c0:	d077      	beq.n	80016b2 <HAL_TIM_ConfigClockSource+0x144>
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	d80e      	bhi.n	80015e4 <HAL_TIM_ConfigClockSource+0x76>
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	f000 808a 	beq.w	80016e0 <HAL_TIM_ConfigClockSource+0x172>
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d802      	bhi.n	80015d6 <HAL_TIM_ConfigClockSource+0x68>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d07e      	beq.n	80016d2 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80015d4:	e099      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	f000 8089 	beq.w	80016ee <HAL_TIM_ConfigClockSource+0x180>
 80015dc:	2b30      	cmp	r3, #48	; 0x30
 80015de:	f000 808d 	beq.w	80016fc <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80015e2:	e092      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80015e4:	2b70      	cmp	r3, #112	; 0x70
 80015e6:	d016      	beq.n	8001616 <HAL_TIM_ConfigClockSource+0xa8>
 80015e8:	2b70      	cmp	r3, #112	; 0x70
 80015ea:	d804      	bhi.n	80015f6 <HAL_TIM_ConfigClockSource+0x88>
 80015ec:	2b50      	cmp	r3, #80	; 0x50
 80015ee:	d040      	beq.n	8001672 <HAL_TIM_ConfigClockSource+0x104>
 80015f0:	2b60      	cmp	r3, #96	; 0x60
 80015f2:	d04e      	beq.n	8001692 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80015f4:	e089      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80015f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fa:	d003      	beq.n	8001604 <HAL_TIM_ConfigClockSource+0x96>
 80015fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001600:	d024      	beq.n	800164c <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001602:	e082      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0207 	bic.w	r2, r2, #7
 8001612:	609a      	str	r2, [r3, #8]
    break;
 8001614:	e079      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f000 f983 	bl	8001930 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001638:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001640:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	609a      	str	r2, [r3, #8]
    break;
 800164a:	e05e      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	6899      	ldr	r1, [r3, #8]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f000 f968 	bl	8001930 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800166e:	609a      	str	r2, [r3, #8]
    break;
 8001670:	e04b      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6859      	ldr	r1, [r3, #4]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	461a      	mov	r2, r3
 8001680:	f000 f8d2 	bl	8001828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2150      	movs	r1, #80	; 0x50
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f931 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 8001690:	e03b      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	461a      	mov	r2, r3
 80016a0:	f000 f8f4 	bl	800188c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2160      	movs	r1, #96	; 0x60
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f921 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 80016b0:	e02b      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6859      	ldr	r1, [r3, #4]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	461a      	mov	r2, r3
 80016c0:	f000 f8b2 	bl	8001828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f911 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 80016d0:	e01b      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f90a 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 80016de:	e014      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2110      	movs	r1, #16
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f903 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 80016ec:	e00d      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2120      	movs	r1, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f8fc 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 80016fa:	e006      	b.n	800170a <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2130      	movs	r1, #48	; 0x30
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8f5 	bl	80018f2 <TIM_ITRx_SetConfig>
    break;
 8001708:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
	...

0800175c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a2a      	ldr	r2, [pc, #168]	; (800181c <TIM_Base_SetConfig+0xc0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00b      	beq.n	8001790 <TIM_Base_SetConfig+0x34>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177e:	d007      	beq.n	8001790 <TIM_Base_SetConfig+0x34>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a27      	ldr	r2, [pc, #156]	; (8001820 <TIM_Base_SetConfig+0xc4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d003      	beq.n	8001790 <TIM_Base_SetConfig+0x34>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a26      	ldr	r2, [pc, #152]	; (8001824 <TIM_Base_SetConfig+0xc8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d108      	bne.n	80017a2 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <TIM_Base_SetConfig+0xc0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00b      	beq.n	80017c2 <TIM_Base_SetConfig+0x66>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b0:	d007      	beq.n	80017c2 <TIM_Base_SetConfig+0x66>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <TIM_Base_SetConfig+0xc4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d003      	beq.n	80017c2 <TIM_Base_SetConfig+0x66>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <TIM_Base_SetConfig+0xc8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d108      	bne.n	80017d4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017da:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <TIM_Base_SetConfig+0xc0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d103      	bne.n	800180c <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	615a      	str	r2, [r3, #20]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	40012c00 	.word	0x40012c00
 8001820:	40000400 	.word	0x40000400
 8001824:	40000800 	.word	0x40000800

08001828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	f023 0201 	bic.w	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800185a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f023 030a 	bic.w	r3, r3, #10
 800186c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	621a      	str	r2, [r3, #32]
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f023 0210 	bic.w	r2, r3, #16
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80018be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	031b      	lsls	r3, r3, #12
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	621a      	str	r2, [r3, #32]
}
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	f043 0307 	orr.w	r3, r3, #7
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	609a      	str	r2, [r3, #8]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001930:	b480      	push	{r7}
 8001932:	b087      	sub	sp, #28
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800194e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	021a      	lsls	r2, r3, #8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	431a      	orrs	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001986:	2302      	movs	r3, #2
 8001988:	e032      	b.n	80019f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019a8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ca:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a26:	f7fe fb91 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2a:	f000 f83f 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2e:	f000 f93f 	bl	8001cb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a32:	f000 f917 	bl	8001c64 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a36:	f000 f875 	bl	8001b24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a3a:	f000 f8c5 	bl	8001bc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t select13 = (1 << 13);
 8001a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a42:	80fb      	strh	r3, [r7, #6]
  HAL_DMA_Start(&hdma_tim2_up, (uint32_t)&select13, (uint32_t)&GPIOC->BSRR, 1);
 8001a44:	1db9      	adds	r1, r7, #6
 8001a46:	2301      	movs	r3, #1
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <main+0x74>)
 8001a4a:	4813      	ldr	r0, [pc, #76]	; (8001a98 <main+0x78>)
 8001a4c:	f7fe fd66 	bl	800051c <HAL_DMA_Start>
  HAL_TIM_Base_Start(&htim2);
 8001a50:	4812      	ldr	r0, [pc, #72]	; (8001a9c <main+0x7c>)
 8001a52:	f7ff fc6a 	bl	800132a <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_DMA(&htim2, TIM_DMA_UPDATE);
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <main+0x7c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <main+0x7c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a64:	60da      	str	r2, [r3, #12]
  HAL_Delay(400);
 8001a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001a6a:	f7fe fbd1 	bl	8000210 <HAL_Delay>
  HAL_DMA_Start(&hdma_tim1_up, (uint32_t)&select13, (uint32_t)&GPIOC->BRR, 1);
 8001a6e:	1db9      	adds	r1, r7, #6
 8001a70:	2301      	movs	r3, #1
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <main+0x80>)
 8001a74:	480b      	ldr	r0, [pc, #44]	; (8001aa4 <main+0x84>)
 8001a76:	f7fe fd51 	bl	800051c <HAL_DMA_Start>
  HAL_TIM_Base_Start(&htim1);
 8001a7a:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <main+0x88>)
 8001a7c:	f7ff fc55 	bl	800132a <HAL_TIM_Base_Start>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <main+0x88>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <main+0x88>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8e:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <main+0x70>
 8001a92:	bf00      	nop
 8001a94:	40011010 	.word	0x40011010
 8001a98:	2000002c 	.word	0x2000002c
 8001a9c:	200000f4 	.word	0x200000f4
 8001aa0:	40011014 	.word	0x40011014
 8001aa4:	200000b0 	.word	0x200000b0
 8001aa8:	20000070 	.word	0x20000070

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b090      	sub	sp, #64	; 0x40
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	2228      	movs	r2, #40	; 0x28
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 faf8 	bl	80020b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	f107 0318 	add.w	r3, r7, #24
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f806 	bl	8000af4 <HAL_RCC_OscConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001aee:	f000 f91f 	bl	8001d30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	230f      	movs	r3, #15
 8001af4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fa56 	bl	8000fbc <HAL_RCC_ClockConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b16:	f000 f90b 	bl	8001d30 <Error_Handler>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3740      	adds	r7, #64	; 0x40
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b40:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b42:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <MX_TIM1_Init+0xa0>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b48:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b6e:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b70:	f7ff fbb0 	bl	80012d4 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001b7a:	f000 f8d9 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	480d      	ldr	r0, [pc, #52]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001b8c:	f7ff fcef 	bl	800156e <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001b96:	f000 f8cb 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <MX_TIM1_Init+0x9c>)
 8001ba8:	f7ff fee3 	bl	8001972 <HAL_TIMEx_MasterConfigSynchronization>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001bb2:	f000 f8bd 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000070 	.word	0x20000070
 8001bc4:	40012c00 	.word	0x40012c00

08001bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001bee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c0e:	4814      	ldr	r0, [pc, #80]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001c10:	f7ff fb60 	bl	80012d4 <HAL_TIM_Base_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c1a:	f000 f889 	bl	8001d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480d      	ldr	r0, [pc, #52]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001c2c:	f7ff fc9f 	bl	800156e <HAL_TIM_ConfigClockSource>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c36:	f000 f87b 	bl	8001d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <MX_TIM2_Init+0x98>)
 8001c48:	f7ff fe93 	bl	8001972 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c52:	f000 f86d 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000f4 	.word	0x200000f4

08001c64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_DMA_Init+0x48>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <MX_DMA_Init+0x48>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6153      	str	r3, [r2, #20]
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_DMA_Init+0x48>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	200c      	movs	r0, #12
 8001c88:	f7fe fbb7 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	f7fe fbd0 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	200f      	movs	r0, #15
 8001c98:	f7fe fbaf 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c9c:	200f      	movs	r0, #15
 8001c9e:	f7fe fbc8 	bl	8000432 <HAL_NVIC_EnableIRQ>

}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000

08001cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc4:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_GPIO_Init+0x78>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <MX_GPIO_Init+0x78>)
 8001cca:	f043 0310 	orr.w	r3, r3, #16
 8001cce:	6193      	str	r3, [r2, #24]
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <MX_GPIO_Init+0x78>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <MX_GPIO_Init+0x78>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <MX_GPIO_Init+0x78>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_GPIO_Init+0x78>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cfa:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_GPIO_Init+0x7c>)
 8001cfc:	f7fe fee2 	bl	8000ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	4619      	mov	r1, r3
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_GPIO_Init+0x7c>)
 8001d1a:	f7fe fd75 	bl	8000808 <HAL_GPIO_Init>

}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40011000 	.word	0x40011000

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_MspInit+0x60>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_MspInit+0x60>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000

08001da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a42      	ldr	r2, [pc, #264]	; (8001eb8 <HAL_TIM_Base_MspInit+0x118>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d144      	bne.n	8001e3c <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <HAL_TIM_Base_MspInit+0x11c>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4a41      	ldr	r2, [pc, #260]	; (8001ebc <HAL_TIM_Base_MspInit+0x11c>)
 8001db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dbc:	6193      	str	r3, [r2, #24]
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_TIM_Base_MspInit+0x11c>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001dcc:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <HAL_TIM_Base_MspInit+0x124>)
 8001dce:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dd0:	4b3b      	ldr	r3, [pc, #236]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd6:	4b3a      	ldr	r3, [pc, #232]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8001ddc:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001de2:	4b37      	ldr	r3, [pc, #220]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de8:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001df4:	2220      	movs	r2, #32
 8001df6:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001dfe:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001e00:	f7fe fb32 	bl	8000468 <HAL_DMA_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001e0a:	f7ff ff91 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001e12:	621a      	str	r2, [r3, #32]
 8001e14:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <HAL_TIM_Base_MspInit+0x120>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2019      	movs	r0, #25
 8001e20:	f7fe faeb 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e24:	2019      	movs	r0, #25
 8001e26:	f7fe fb04 	bl	8000432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	201a      	movs	r0, #26
 8001e30:	f7fe fae3 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001e34:	201a      	movs	r0, #26
 8001e36:	f7fe fafc 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e3a:	e038      	b.n	8001eae <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d133      	bne.n	8001eae <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_TIM_Base_MspInit+0x11c>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_Base_MspInit+0x11c>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_TIM_Base_MspInit+0x11c>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_TIM_Base_MspInit+0x12c>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_DISABLE;
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7c:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_CIRCULAR;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e88:	2220      	movs	r2, #32
 8001e8a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001e94:	f7fe fae8 	bl	8000468 <HAL_DMA_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_TIM_Base_MspInit+0x102>
      Error_Handler();
 8001e9e:	f7ff ff47 	bl	8001d30 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001ea6:	621a      	str	r2, [r3, #32]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <HAL_TIM_Base_MspInit+0x128>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	200000b0 	.word	0x200000b0
 8001ec4:	40020058 	.word	0x40020058
 8001ec8:	2000002c 	.word	0x2000002c
 8001ecc:	4002001c 	.word	0x4002001c

08001ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <HardFault_Handler+0x4>

08001ee2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <MemManage_Handler+0x4>

08001ee8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <BusFault_Handler+0x4>

08001eee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <UsageFault_Handler+0x4>

08001ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1c:	f7fe f95c 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 8001f28:	4802      	ldr	r0, [pc, #8]	; (8001f34 <DMA1_Channel2_IRQHandler+0x10>)
 8001f2a:	f7fe fb39 	bl	80005a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000002c 	.word	0x2000002c

08001f38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <DMA1_Channel5_IRQHandler+0x10>)
 8001f3e:	f7fe fb2f 	bl	80005a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200000b0 	.word	0x200000b0

08001f4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f50:	4802      	ldr	r0, [pc, #8]	; (8001f5c <TIM1_UP_IRQHandler+0x10>)
 8001f52:	f7ff fa04 	bl	800135e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000070 	.word	0x20000070

08001f60 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001f66:	f7ff f9fa 	bl	800135e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000070 	.word	0x20000070

08001f74 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIOC->BSRR = (1 << 13);
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 8001f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f82:	611a      	str	r2, [r3, #16]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40011000 	.word	0x40011000

08001f94 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIOC->BRR = (1 << 13);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8001f9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa2:	615a      	str	r2, [r3, #20]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40011000 	.word	0x40011000

08001fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <SystemInit+0x5c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <SystemInit+0x5c>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <SystemInit+0x5c>)
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4911      	ldr	r1, [pc, #68]	; (8002010 <SystemInit+0x5c>)
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <SystemInit+0x60>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <SystemInit+0x5c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <SystemInit+0x5c>)
 8001fd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <SystemInit+0x5c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <SystemInit+0x5c>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <SystemInit+0x5c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <SystemInit+0x5c>)
 8001ff2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ff6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SystemInit+0x5c>)
 8001ffa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ffe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SystemInit+0x64>)
 8002002:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002006:	609a      	str	r2, [r3, #8]
#endif 
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40021000 	.word	0x40021000
 8002014:	f8ff0000 	.word	0xf8ff0000
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800201c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800201e:	e003      	b.n	8002028 <LoopCopyDataInit>

08002020 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002022:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002024:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002026:	3104      	adds	r1, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002028:	480a      	ldr	r0, [pc, #40]	; (8002054 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800202c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800202e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002030:	d3f6      	bcc.n	8002020 <CopyDataInit>
  ldr r2, =_sbss
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002034:	e002      	b.n	800203c <LoopFillZerobss>

08002036 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002038:	f842 3b04 	str.w	r3, [r2], #4

0800203c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800203e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002040:	d3f9      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002042:	f7ff ffb7 	bl	8001fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002046:	f000 f80f 	bl	8002068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800204a:	f7ff fce9 	bl	8001a20 <main>
  bx lr
 800204e:	4770      	bx	lr
  ldr r3, =_sidata
 8002050:	08002104 	.word	0x08002104
  ldr r0, =_sdata
 8002054:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002058:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800205c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002060:	20000134 	.word	0x20000134

08002064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC1_2_IRQHandler>
	...

08002068 <__libc_init_array>:
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	2500      	movs	r5, #0
 800206c:	4e0c      	ldr	r6, [pc, #48]	; (80020a0 <__libc_init_array+0x38>)
 800206e:	4c0d      	ldr	r4, [pc, #52]	; (80020a4 <__libc_init_array+0x3c>)
 8002070:	1ba4      	subs	r4, r4, r6
 8002072:	10a4      	asrs	r4, r4, #2
 8002074:	42a5      	cmp	r5, r4
 8002076:	d109      	bne.n	800208c <__libc_init_array+0x24>
 8002078:	f000 f822 	bl	80020c0 <_init>
 800207c:	2500      	movs	r5, #0
 800207e:	4e0a      	ldr	r6, [pc, #40]	; (80020a8 <__libc_init_array+0x40>)
 8002080:	4c0a      	ldr	r4, [pc, #40]	; (80020ac <__libc_init_array+0x44>)
 8002082:	1ba4      	subs	r4, r4, r6
 8002084:	10a4      	asrs	r4, r4, #2
 8002086:	42a5      	cmp	r5, r4
 8002088:	d105      	bne.n	8002096 <__libc_init_array+0x2e>
 800208a:	bd70      	pop	{r4, r5, r6, pc}
 800208c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002090:	4798      	blx	r3
 8002092:	3501      	adds	r5, #1
 8002094:	e7ee      	b.n	8002074 <__libc_init_array+0xc>
 8002096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800209a:	4798      	blx	r3
 800209c:	3501      	adds	r5, #1
 800209e:	e7f2      	b.n	8002086 <__libc_init_array+0x1e>
 80020a0:	080020fc 	.word	0x080020fc
 80020a4:	080020fc 	.word	0x080020fc
 80020a8:	080020fc 	.word	0x080020fc
 80020ac:	08002100 	.word	0x08002100

080020b0 <memset>:
 80020b0:	4603      	mov	r3, r0
 80020b2:	4402      	add	r2, r0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d100      	bne.n	80020ba <memset+0xa>
 80020b8:	4770      	bx	lr
 80020ba:	f803 1b01 	strb.w	r1, [r3], #1
 80020be:	e7f9      	b.n	80020b4 <memset+0x4>

080020c0 <_init>:
 80020c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c2:	bf00      	nop
 80020c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c6:	bc08      	pop	{r3}
 80020c8:	469e      	mov	lr, r3
 80020ca:	4770      	bx	lr

080020cc <_fini>:
 80020cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ce:	bf00      	nop
 80020d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d2:	bc08      	pop	{r3}
 80020d4:	469e      	mov	lr, r3
 80020d6:	4770      	bx	lr
