
blinky-DMA-ODR-port-output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022c4  080022c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022c4  080022c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022c4  080022c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080022d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080022d8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d165  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b57  00000000  00000000  0002d19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000928  00000000  00000000  0002ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002f620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e8b  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076c5  00000000  00000000  00044d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006facb  00000000  00000000  0004c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bbeab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  000bbf28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002274 	.word	0x08002274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002274 	.word	0x08002274

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f91f 	bl	80003a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 feea 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f937 	bl	800040a <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f8ff 	bl	80003b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4906      	ldr	r1, [pc, #24]	; (80002a0 <NVIC_EnableIRQ+0x2c>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	6039      	str	r1, [r7, #0]
 80002ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da0b      	bge.n	80002d0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <NVIC_SetPriority+0x4c>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f003 030f 	and.w	r3, r3, #15
 80002c4:	3b04      	subs	r3, #4
 80002c6:	0112      	lsls	r2, r2, #4
 80002c8:	b2d2      	uxtb	r2, r2
 80002ca:	440b      	add	r3, r1
 80002cc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002ce:	e009      	b.n	80002e4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <NVIC_SetPriority+0x50>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b089      	sub	sp, #36	; 0x24
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f003 0307 	and.w	r3, r3, #7
 800030a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	69fb      	ldr	r3, [r7, #28]
 800030e:	f1c3 0307 	rsb	r3, r3, #7
 8000312:	2b04      	cmp	r3, #4
 8000314:	bf28      	it	cs
 8000316:	2304      	movcs	r3, #4
 8000318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800031a:	69fb      	ldr	r3, [r7, #28]
 800031c:	3304      	adds	r3, #4
 800031e:	2b06      	cmp	r3, #6
 8000320:	d902      	bls.n	8000328 <NVIC_EncodePriority+0x30>
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3b03      	subs	r3, #3
 8000326:	e000      	b.n	800032a <NVIC_EncodePriority+0x32>
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800032c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000330:	69bb      	ldr	r3, [r7, #24]
 8000332:	fa02 f303 	lsl.w	r3, r2, r3
 8000336:	43da      	mvns	r2, r3
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	401a      	ands	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	43d9      	mvns	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	4313      	orrs	r3, r2
         );
}
 8000352:	4618      	mov	r0, r3
 8000354:	3724      	adds	r7, #36	; 0x24
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800036c:	d301      	bcc.n	8000372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800036e:	2301      	movs	r3, #1
 8000370:	e00f      	b.n	8000392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <SysTick_Config+0x40>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3b01      	subs	r3, #1
 8000378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800037a:	210f      	movs	r1, #15
 800037c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000380:	f7ff ff90 	bl	80002a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <SysTick_Config+0x40>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800038a:	4b04      	ldr	r3, [pc, #16]	; (800039c <SysTick_Config+0x40>)
 800038c:	2207      	movs	r2, #7
 800038e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000390:	2300      	movs	r3, #0
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	e000e010 	.word	0xe000e010

080003a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a8:	6878      	ldr	r0, [r7, #4]
 80003aa:	f7ff ff31 	bl	8000210 <NVIC_SetPriorityGrouping>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	4603      	mov	r3, r0
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
 80003c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c8:	f7ff ff46 	bl	8000258 <NVIC_GetPriorityGrouping>
 80003cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	68b9      	ldr	r1, [r7, #8]
 80003d2:	6978      	ldr	r0, [r7, #20]
 80003d4:	f7ff ff90 	bl	80002f8 <NVIC_EncodePriority>
 80003d8:	4602      	mov	r2, r0
 80003da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003de:	4611      	mov	r1, r2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff5f 	bl	80002a4 <NVIC_SetPriority>
}
 80003e6:	bf00      	nop
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff39 	bl	8000274 <NVIC_EnableIRQ>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000412:	6878      	ldr	r0, [r7, #4]
 8000414:	f7ff ffa2 	bl	800035c <SysTick_Config>
 8000418:	4603      	mov	r3, r0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d101      	bne.n	800043a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000436:	2301      	movs	r3, #1
 8000438:	e043      	b.n	80004c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	461a      	mov	r2, r3
 8000440:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_DMA_Init+0xa8>)
 8000442:	4413      	add	r3, r2
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <HAL_DMA_Init+0xac>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	009a      	lsls	r2, r3, #2
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <HAL_DMA_Init+0xb0>)
 8000456:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2202      	movs	r2, #2
 800045c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800046e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800047c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2200      	movs	r2, #0
 80004ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	bffdfff8 	.word	0xbffdfff8
 80004d0:	cccccccd 	.word	0xcccccccd
 80004d4:	40020000 	.word	0x40020000

080004d8 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80004e6:	2300      	movs	r3, #0
 80004e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d101      	bne.n	80004f8 <HAL_DMA_Start+0x20>
 80004f4:	2302      	movs	r3, #2
 80004f6:	e02d      	b.n	8000554 <HAL_DMA_Start+0x7c>
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2201      	movs	r2, #1
 80004fc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000506:	2b01      	cmp	r3, #1
 8000508:	d11d      	bne.n	8000546 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2202      	movs	r2, #2
 800050e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2200      	movs	r2, #0
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f022 0201 	bic.w	r2, r2, #1
 8000526:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	68b9      	ldr	r1, [r7, #8]
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f000 f91a 	bl	8000768 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f042 0201 	orr.w	r2, r2, #1
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	e005      	b.n	8000552 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 800054e:	2302      	movs	r3, #2
 8000550:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8000552:	7dfb      	ldrb	r3, [r7, #23]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	2204      	movs	r2, #4
 800057a:	409a      	lsls	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4013      	ands	r3, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	d04f      	beq.n	8000624 <HAL_DMA_IRQHandler+0xc8>
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	2b00      	cmp	r3, #0
 800058c:	d04a      	beq.n	8000624 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	2b00      	cmp	r3, #0
 800059a:	d107      	bne.n	80005ac <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f022 0204 	bic.w	r2, r2, #4
 80005aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a66      	ldr	r2, [pc, #408]	; (800074c <HAL_DMA_IRQHandler+0x1f0>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d029      	beq.n	800060a <HAL_DMA_IRQHandler+0xae>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a65      	ldr	r2, [pc, #404]	; (8000750 <HAL_DMA_IRQHandler+0x1f4>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d022      	beq.n	8000606 <HAL_DMA_IRQHandler+0xaa>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a63      	ldr	r2, [pc, #396]	; (8000754 <HAL_DMA_IRQHandler+0x1f8>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d01a      	beq.n	8000600 <HAL_DMA_IRQHandler+0xa4>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a62      	ldr	r2, [pc, #392]	; (8000758 <HAL_DMA_IRQHandler+0x1fc>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d012      	beq.n	80005fa <HAL_DMA_IRQHandler+0x9e>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a60      	ldr	r2, [pc, #384]	; (800075c <HAL_DMA_IRQHandler+0x200>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d00a      	beq.n	80005f4 <HAL_DMA_IRQHandler+0x98>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a5f      	ldr	r2, [pc, #380]	; (8000760 <HAL_DMA_IRQHandler+0x204>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d102      	bne.n	80005ee <HAL_DMA_IRQHandler+0x92>
 80005e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ec:	e00e      	b.n	800060c <HAL_DMA_IRQHandler+0xb0>
 80005ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005f2:	e00b      	b.n	800060c <HAL_DMA_IRQHandler+0xb0>
 80005f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005f8:	e008      	b.n	800060c <HAL_DMA_IRQHandler+0xb0>
 80005fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fe:	e005      	b.n	800060c <HAL_DMA_IRQHandler+0xb0>
 8000600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000604:	e002      	b.n	800060c <HAL_DMA_IRQHandler+0xb0>
 8000606:	2340      	movs	r3, #64	; 0x40
 8000608:	e000      	b.n	800060c <HAL_DMA_IRQHandler+0xb0>
 800060a:	2304      	movs	r3, #4
 800060c:	4a55      	ldr	r2, [pc, #340]	; (8000764 <HAL_DMA_IRQHandler+0x208>)
 800060e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000614:	2b00      	cmp	r3, #0
 8000616:	f000 8094 	beq.w	8000742 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000622:	e08e      	b.n	8000742 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	2202      	movs	r2, #2
 800062a:	409a      	lsls	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4013      	ands	r3, r2
 8000630:	2b00      	cmp	r3, #0
 8000632:	d056      	beq.n	80006e2 <HAL_DMA_IRQHandler+0x186>
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b00      	cmp	r3, #0
 800063c:	d051      	beq.n	80006e2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f003 0320 	and.w	r3, r3, #32
 8000648:	2b00      	cmp	r3, #0
 800064a:	d10b      	bne.n	8000664 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f022 020a 	bic.w	r2, r2, #10
 800065a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a38      	ldr	r2, [pc, #224]	; (800074c <HAL_DMA_IRQHandler+0x1f0>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d029      	beq.n	80006c2 <HAL_DMA_IRQHandler+0x166>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a37      	ldr	r2, [pc, #220]	; (8000750 <HAL_DMA_IRQHandler+0x1f4>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d022      	beq.n	80006be <HAL_DMA_IRQHandler+0x162>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a35      	ldr	r2, [pc, #212]	; (8000754 <HAL_DMA_IRQHandler+0x1f8>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d01a      	beq.n	80006b8 <HAL_DMA_IRQHandler+0x15c>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a34      	ldr	r2, [pc, #208]	; (8000758 <HAL_DMA_IRQHandler+0x1fc>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d012      	beq.n	80006b2 <HAL_DMA_IRQHandler+0x156>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a32      	ldr	r2, [pc, #200]	; (800075c <HAL_DMA_IRQHandler+0x200>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d00a      	beq.n	80006ac <HAL_DMA_IRQHandler+0x150>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a31      	ldr	r2, [pc, #196]	; (8000760 <HAL_DMA_IRQHandler+0x204>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d102      	bne.n	80006a6 <HAL_DMA_IRQHandler+0x14a>
 80006a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80006a4:	e00e      	b.n	80006c4 <HAL_DMA_IRQHandler+0x168>
 80006a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006aa:	e00b      	b.n	80006c4 <HAL_DMA_IRQHandler+0x168>
 80006ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006b0:	e008      	b.n	80006c4 <HAL_DMA_IRQHandler+0x168>
 80006b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b6:	e005      	b.n	80006c4 <HAL_DMA_IRQHandler+0x168>
 80006b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006bc:	e002      	b.n	80006c4 <HAL_DMA_IRQHandler+0x168>
 80006be:	2320      	movs	r3, #32
 80006c0:	e000      	b.n	80006c4 <HAL_DMA_IRQHandler+0x168>
 80006c2:	2302      	movs	r3, #2
 80006c4:	4a27      	ldr	r2, [pc, #156]	; (8000764 <HAL_DMA_IRQHandler+0x208>)
 80006c6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d034      	beq.n	8000742 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80006e0:	e02f      	b.n	8000742 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	2208      	movs	r2, #8
 80006e8:	409a      	lsls	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4013      	ands	r3, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d028      	beq.n	8000744 <HAL_DMA_IRQHandler+0x1e8>
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d023      	beq.n	8000744 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f022 020e 	bic.w	r2, r2, #14
 800070a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000714:	2101      	movs	r1, #1
 8000716:	fa01 f202 	lsl.w	r2, r1, r2
 800071a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	2b00      	cmp	r3, #0
 8000738:	d004      	beq.n	8000744 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	4798      	blx	r3
    }
  }
  return;
 8000742:	bf00      	nop
 8000744:	bf00      	nop
}
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020008 	.word	0x40020008
 8000750:	4002001c 	.word	0x4002001c
 8000754:	40020030 	.word	0x40020030
 8000758:	40020044 	.word	0x40020044
 800075c:	40020058 	.word	0x40020058
 8000760:	4002006c 	.word	0x4002006c
 8000764:	40020000 	.word	0x40020000

08000768 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2b10      	cmp	r3, #16
 8000794:	d108      	bne.n	80007a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80007a6:	e007      	b.n	80007b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
 80007e6:	e127      	b.n	8000a38 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80007e8:	2201      	movs	r2, #1
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	f040 8116 	bne.w	8000a32 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	2b12      	cmp	r3, #18
 800080c:	d034      	beq.n	8000878 <HAL_GPIO_Init+0xb4>
 800080e:	2b12      	cmp	r3, #18
 8000810:	d80d      	bhi.n	800082e <HAL_GPIO_Init+0x6a>
 8000812:	2b02      	cmp	r3, #2
 8000814:	d02b      	beq.n	800086e <HAL_GPIO_Init+0xaa>
 8000816:	2b02      	cmp	r3, #2
 8000818:	d804      	bhi.n	8000824 <HAL_GPIO_Init+0x60>
 800081a:	2b00      	cmp	r3, #0
 800081c:	d031      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
 800081e:	2b01      	cmp	r3, #1
 8000820:	d01c      	beq.n	800085c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000822:	e048      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000824:	2b03      	cmp	r3, #3
 8000826:	d043      	beq.n	80008b0 <HAL_GPIO_Init+0xec>
 8000828:	2b11      	cmp	r3, #17
 800082a:	d01b      	beq.n	8000864 <HAL_GPIO_Init+0xa0>
          break;
 800082c:	e043      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800082e:	4a87      	ldr	r2, [pc, #540]	; (8000a4c <HAL_GPIO_Init+0x288>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d026      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
 8000834:	4a85      	ldr	r2, [pc, #532]	; (8000a4c <HAL_GPIO_Init+0x288>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d806      	bhi.n	8000848 <HAL_GPIO_Init+0x84>
 800083a:	4a85      	ldr	r2, [pc, #532]	; (8000a50 <HAL_GPIO_Init+0x28c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d020      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
 8000840:	4a84      	ldr	r2, [pc, #528]	; (8000a54 <HAL_GPIO_Init+0x290>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d01d      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
          break;
 8000846:	e036      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000848:	4a83      	ldr	r2, [pc, #524]	; (8000a58 <HAL_GPIO_Init+0x294>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d019      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
 800084e:	4a83      	ldr	r2, [pc, #524]	; (8000a5c <HAL_GPIO_Init+0x298>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d016      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
 8000854:	4a82      	ldr	r2, [pc, #520]	; (8000a60 <HAL_GPIO_Init+0x29c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d013      	beq.n	8000882 <HAL_GPIO_Init+0xbe>
          break;
 800085a:	e02c      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	623b      	str	r3, [r7, #32]
          break;
 8000862:	e028      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	3304      	adds	r3, #4
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e023      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	3308      	adds	r3, #8
 8000874:	623b      	str	r3, [r7, #32]
          break;
 8000876:	e01e      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	330c      	adds	r3, #12
 800087e:	623b      	str	r3, [r7, #32]
          break;
 8000880:	e019      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800088a:	2304      	movs	r3, #4
 800088c:	623b      	str	r3, [r7, #32]
          break;
 800088e:	e012      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d105      	bne.n	80008a4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000898:	2308      	movs	r3, #8
 800089a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	611a      	str	r2, [r3, #16]
          break;
 80008a2:	e008      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	615a      	str	r2, [r3, #20]
          break;
 80008ae:	e002      	b.n	80008b6 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
          break;
 80008b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	2bff      	cmp	r3, #255	; 0xff
 80008ba:	d801      	bhi.n	80008c0 <HAL_GPIO_Init+0xfc>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	e001      	b.n	80008c4 <HAL_GPIO_Init+0x100>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3304      	adds	r3, #4
 80008c4:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	2bff      	cmp	r3, #255	; 0xff
 80008ca:	d802      	bhi.n	80008d2 <HAL_GPIO_Init+0x10e>
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	e002      	b.n	80008d8 <HAL_GPIO_Init+0x114>
 80008d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d4:	3b08      	subs	r3, #8
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	210f      	movs	r1, #15
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	401a      	ands	r2, r3
 80008ea:	6a39      	ldr	r1, [r7, #32]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	431a      	orrs	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 8096 	beq.w	8000a32 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <HAL_GPIO_Init+0x2a0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a56      	ldr	r2, [pc, #344]	; (8000a64 <HAL_GPIO_Init+0x2a0>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b54      	ldr	r3, [pc, #336]	; (8000a64 <HAL_GPIO_Init+0x2a0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800091e:	4a52      	ldr	r2, [pc, #328]	; (8000a68 <HAL_GPIO_Init+0x2a4>)
 8000920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	3302      	adds	r3, #2
 8000926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	220f      	movs	r2, #15
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	4013      	ands	r3, r2
 8000940:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a49      	ldr	r2, [pc, #292]	; (8000a6c <HAL_GPIO_Init+0x2a8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d013      	beq.n	8000972 <HAL_GPIO_Init+0x1ae>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a48      	ldr	r2, [pc, #288]	; (8000a70 <HAL_GPIO_Init+0x2ac>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00d      	beq.n	800096e <HAL_GPIO_Init+0x1aa>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a47      	ldr	r2, [pc, #284]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x1a6>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a46      	ldr	r2, [pc, #280]	; (8000a78 <HAL_GPIO_Init+0x2b4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_GPIO_Init+0x1a2>
 8000962:	2303      	movs	r3, #3
 8000964:	e006      	b.n	8000974 <HAL_GPIO_Init+0x1b0>
 8000966:	2304      	movs	r3, #4
 8000968:	e004      	b.n	8000974 <HAL_GPIO_Init+0x1b0>
 800096a:	2302      	movs	r3, #2
 800096c:	e002      	b.n	8000974 <HAL_GPIO_Init+0x1b0>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <HAL_GPIO_Init+0x1b0>
 8000972:	2300      	movs	r3, #0
 8000974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000976:	f002 0203 	and.w	r2, r2, #3
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	4093      	lsls	r3, r2
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4313      	orrs	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000984:	4938      	ldr	r1, [pc, #224]	; (8000a68 <HAL_GPIO_Init+0x2a4>)
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800099e:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4936      	ldr	r1, [pc, #216]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]
 80009aa:	e006      	b.n	80009ba <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	43db      	mvns	r3, r3
 80009b4:	4931      	ldr	r1, [pc, #196]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009b6:	4013      	ands	r3, r2
 80009b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	492c      	ldr	r1, [pc, #176]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	604b      	str	r3, [r1, #4]
 80009d2:	e006      	b.n	80009e2 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	43db      	mvns	r3, r3
 80009dc:	4927      	ldr	r1, [pc, #156]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009de:	4013      	ands	r3, r2
 80009e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d006      	beq.n	80009fc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	4922      	ldr	r1, [pc, #136]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	608b      	str	r3, [r1, #8]
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 80009fe:	689a      	ldr	r2, [r3, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	491d      	ldr	r1, [pc, #116]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a18:	68da      	ldr	r2, [r3, #12]
 8000a1a:	4918      	ldr	r1, [pc, #96]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	60cb      	str	r3, [r1, #12]
 8000a22:	e006      	b.n	8000a32 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4913      	ldr	r1, [pc, #76]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	3301      	adds	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
 8000a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	f67f aed4 	bls.w	80007e8 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000a40:	bf00      	nop
 8000a42:	372c      	adds	r7, #44	; 0x2c
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	10210000 	.word	0x10210000
 8000a50:	10110000 	.word	0x10110000
 8000a54:	10120000 	.word	0x10120000
 8000a58:	10310000 	.word	0x10310000
 8000a5c:	10320000 	.word	0x10320000
 8000a60:	10220000 	.word	0x10220000
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010000 	.word	0x40010000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	40011000 	.word	0x40011000
 8000a78:	40011400 	.word	0x40011400
 8000a7c:	40010400 	.word	0x40010400

08000a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a90:	787b      	ldrb	r3, [r7, #1]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a96:	887a      	ldrh	r2, [r7, #2]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a9c:	e003      	b.n	8000aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	041a      	lsls	r2, r3, #16
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	611a      	str	r2, [r3, #16]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f000 8087 	beq.w	8000bd8 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000aca:	4b92      	ldr	r3, [pc, #584]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 030c 	and.w	r3, r3, #12
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d00c      	beq.n	8000af0 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad6:	4b8f      	ldr	r3, [pc, #572]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d112      	bne.n	8000b08 <HAL_RCC_OscConfig+0x58>
 8000ae2:	4b8c      	ldr	r3, [pc, #560]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aee:	d10b      	bne.n	8000b08 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af0:	4b88      	ldr	r3, [pc, #544]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d06c      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x126>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d168      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e22d      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b10:	d106      	bne.n	8000b20 <HAL_RCC_OscConfig+0x70>
 8000b12:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a7f      	ldr	r2, [pc, #508]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e02e      	b.n	8000b7e <HAL_RCC_OscConfig+0xce>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <HAL_RCC_OscConfig+0x92>
 8000b28:	4b7a      	ldr	r3, [pc, #488]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a79      	ldr	r2, [pc, #484]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b77      	ldr	r3, [pc, #476]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a76      	ldr	r2, [pc, #472]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e01d      	b.n	8000b7e <HAL_RCC_OscConfig+0xce>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4a:	d10c      	bne.n	8000b66 <HAL_RCC_OscConfig+0xb6>
 8000b4c:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a70      	ldr	r2, [pc, #448]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b6e      	ldr	r3, [pc, #440]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a6d      	ldr	r2, [pc, #436]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	e00b      	b.n	8000b7e <HAL_RCC_OscConfig+0xce>
 8000b66:	4b6b      	ldr	r3, [pc, #428]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a6a      	ldr	r2, [pc, #424]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	4b68      	ldr	r3, [pc, #416]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a67      	ldr	r2, [pc, #412]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7c:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d013      	beq.n	8000bae <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b86:	f7ff fb39 	bl	80001fc <HAL_GetTick>
 8000b8a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8c:	e008      	b.n	8000ba0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	4602      	mov	r2, r0
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	2b64      	cmp	r3, #100	; 0x64
 8000b9a:	d901      	bls.n	8000ba0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e1e1      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba0:	4b5c      	ldr	r3, [pc, #368]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f0      	beq.n	8000b8e <HAL_RCC_OscConfig+0xde>
 8000bac:	e014      	b.n	8000bd8 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fb25 	bl	80001fc <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b64      	cmp	r3, #100	; 0x64
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e1cd      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc8:	4b52      	ldr	r3, [pc, #328]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1f0      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x106>
 8000bd4:	e000      	b.n	8000bd8 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d063      	beq.n	8000cac <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be4:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00b      	beq.n	8000c08 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf0:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d11c      	bne.n	8000c36 <HAL_RCC_OscConfig+0x186>
 8000bfc:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d116      	bne.n	8000c36 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c08:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f003 0302 	and.w	r3, r3, #2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d005      	beq.n	8000c20 <HAL_RCC_OscConfig+0x170>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d001      	beq.n	8000c20 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e1a1      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	4939      	ldr	r1, [pc, #228]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000c30:	4313      	orrs	r3, r2
 8000c32:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c34:	e03a      	b.n	8000cac <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d020      	beq.n	8000c80 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <HAL_RCC_OscConfig+0x268>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fada 	bl	80001fc <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fad6 	bl	80001fc <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e182      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	4926      	ldr	r1, [pc, #152]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
 8000c7e:	e015      	b.n	8000cac <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <HAL_RCC_OscConfig+0x268>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c86:	f7ff fab9 	bl	80001fc <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fab5 	bl	80001fc <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e161      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f0      	bne.n	8000c8e <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d039      	beq.n	8000d2c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d019      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc6:	f7ff fa99 	bl	80001fc <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cce:	f7ff fa95 	bl	80001fc <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e141      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_RCC_OscConfig+0x264>)
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000cec:	2001      	movs	r0, #1
 8000cee:	f000 fab1 	bl	8001254 <RCC_Delay>
 8000cf2:	e01b      	b.n	8000d2c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fa7f 	bl	80001fc <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d00:	e00e      	b.n	8000d20 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d02:	f7ff fa7b 	bl	80001fc <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d907      	bls.n	8000d20 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e127      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
 8000d14:	40021000 	.word	0x40021000
 8000d18:	42420000 	.word	0x42420000
 8000d1c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	4b92      	ldr	r3, [pc, #584]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1ea      	bne.n	8000d02 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80a6 	beq.w	8000e86 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	4b8b      	ldr	r3, [pc, #556]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10d      	bne.n	8000d66 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b88      	ldr	r3, [pc, #544]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a87      	ldr	r2, [pc, #540]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b85      	ldr	r3, [pc, #532]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d62:	2301      	movs	r3, #1
 8000d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d66:	4b82      	ldr	r3, [pc, #520]	; (8000f70 <HAL_RCC_OscConfig+0x4c0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d118      	bne.n	8000da4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d72:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <HAL_RCC_OscConfig+0x4c0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7e      	ldr	r2, [pc, #504]	; (8000f70 <HAL_RCC_OscConfig+0x4c0>)
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fa3d 	bl	80001fc <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d86:	f7ff fa39 	bl	80001fc <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	; 0x64
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e0e5      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d98:	4b75      	ldr	r3, [pc, #468]	; (8000f70 <HAL_RCC_OscConfig+0x4c0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x30a>
 8000dac:	4b6f      	ldr	r3, [pc, #444]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	4a6e      	ldr	r2, [pc, #440]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6213      	str	r3, [r2, #32]
 8000db8:	e02d      	b.n	8000e16 <HAL_RCC_OscConfig+0x366>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x32c>
 8000dc2:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4a69      	ldr	r2, [pc, #420]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6213      	str	r3, [r2, #32]
 8000dce:	4b67      	ldr	r3, [pc, #412]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4a66      	ldr	r2, [pc, #408]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000dd4:	f023 0304 	bic.w	r3, r3, #4
 8000dd8:	6213      	str	r3, [r2, #32]
 8000dda:	e01c      	b.n	8000e16 <HAL_RCC_OscConfig+0x366>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x34e>
 8000de4:	4b61      	ldr	r3, [pc, #388]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4a60      	ldr	r2, [pc, #384]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6213      	str	r3, [r2, #32]
 8000df0:	4b5e      	ldr	r3, [pc, #376]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a5d      	ldr	r2, [pc, #372]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6213      	str	r3, [r2, #32]
 8000dfc:	e00b      	b.n	8000e16 <HAL_RCC_OscConfig+0x366>
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4a5a      	ldr	r2, [pc, #360]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6213      	str	r3, [r2, #32]
 8000e0a:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d015      	beq.n	8000e4a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e1e:	f7ff f9ed 	bl	80001fc <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e24:	e00a      	b.n	8000e3c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f7ff f9e9 	bl	80001fc <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e093      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0ee      	beq.n	8000e26 <HAL_RCC_OscConfig+0x376>
 8000e48:	e014      	b.n	8000e74 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff f9d7 	bl	80001fc <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e50:	e00a      	b.n	8000e68 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f7ff f9d3 	bl	80001fc <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e07d      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1ee      	bne.n	8000e52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d105      	bne.n	8000e86 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d069      	beq.n	8000f62 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e8e:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d061      	beq.n	8000f5e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d146      	bne.n	8000f30 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <HAL_RCC_OscConfig+0x4c4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea8:	f7ff f9a8 	bl	80001fc <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb0:	f7ff f9a4 	bl	80001fc <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e050      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d108      	bne.n	8000eea <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4921      	ldr	r1, [pc, #132]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a19      	ldr	r1, [r3, #32]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	430b      	orrs	r3, r1
 8000efc:	491b      	ldr	r1, [pc, #108]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff f978 	bl	80001fc <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f10:	f7ff f974 	bl	80001fc <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e020      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x460>
 8000f2e:	e018      	b.n	8000f62 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff f961 	bl	80001fc <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3e:	f7ff f95d 	bl	80001fc <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e009      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_RCC_OscConfig+0x4bc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x48e>
 8000f5c:	e001      	b.n	8000f62 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40007000 	.word	0x40007000
 8000f74:	42420060 	.word	0x42420060

08000f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f86:	4b7e      	ldr	r3, [pc, #504]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d910      	bls.n	8000fb6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f94:	4b7a      	ldr	r3, [pc, #488]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f023 0207 	bic.w	r2, r3, #7
 8000f9c:	4978      	ldr	r1, [pc, #480]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fa4:	4b76      	ldr	r3, [pc, #472]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d001      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e0e0      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d020      	beq.n	8001004 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fce:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4a6c      	ldr	r2, [pc, #432]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8000fd4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fd8:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe6:	4b67      	ldr	r3, [pc, #412]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a66      	ldr	r2, [pc, #408]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8000fec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ff0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff2:	4b64      	ldr	r3, [pc, #400]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4961      	ldr	r1, [pc, #388]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d06a      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d107      	bne.n	8001028 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001018:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d115      	bne.n	8001050 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0a7      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d107      	bne.n	8001040 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001030:	4b54      	ldr	r3, [pc, #336]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e09b      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e093      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001050:	4b4c      	ldr	r3, [pc, #304]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f023 0203 	bic.w	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4949      	ldr	r1, [pc, #292]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001062:	f7ff f8cb 	bl	80001fc <HAL_GetTick>
 8001066:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d112      	bne.n	8001096 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001072:	f7ff f8c3 	bl	80001fc <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001080:	4293      	cmp	r3, r2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e077      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 030c 	and.w	r3, r3, #12
 8001090:	2b04      	cmp	r3, #4
 8001092:	d1ee      	bne.n	8001072 <HAL_RCC_ClockConfig+0xfa>
 8001094:	e027      	b.n	80010e6 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d11d      	bne.n	80010da <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109e:	e00a      	b.n	80010b6 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a0:	f7ff f8ac 	bl	80001fc <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e060      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d1ee      	bne.n	80010a0 <HAL_RCC_ClockConfig+0x128>
 80010c2:	e010      	b.n	80010e6 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff f89a 	bl	80001fc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e04e      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010da:	4b2a      	ldr	r3, [pc, #168]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1ee      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d210      	bcs.n	8001116 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 0207 	bic.w	r2, r3, #7
 80010fc:	4920      	ldr	r1, [pc, #128]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_RCC_ClockConfig+0x208>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d001      	beq.n	8001116 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e030      	b.n	8001178 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	4915      	ldr	r1, [pc, #84]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d009      	beq.n	8001154 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001154:	f000 f81c 	bl	8001190 <HAL_RCC_GetSysClockFreq>
 8001158:	4601      	mov	r1, r0
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_RCC_ClockConfig+0x20c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_RCC_ClockConfig+0x210>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	fa21 f303 	lsr.w	r3, r1, r3
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_RCC_ClockConfig+0x214>)
 800116e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff f801 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40022000 	.word	0x40022000
 8001184:	40021000 	.word	0x40021000
 8001188:	080022b4 	.word	0x080022b4
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001190:	b490      	push	{r4, r7}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001198:	1d3c      	adds	r4, r7, #4
 800119a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800119c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	2300      	movs	r3, #0
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d002      	beq.n	80011d0 <HAL_RCC_GetSysClockFreq+0x40>
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d003      	beq.n	80011d6 <HAL_RCC_GetSysClockFreq+0x46>
 80011ce:	e02d      	b.n	800122c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_RCC_GetSysClockFreq+0xbc>)
 80011d2:	623b      	str	r3, [r7, #32]
      break;
 80011d4:	e02d      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011e2:	4413      	add	r3, r2
 80011e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	0c5b      	lsrs	r3, r3, #17
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001202:	4413      	add	r3, r2
 8001204:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001208:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	4a0f      	ldr	r2, [pc, #60]	; (800124c <HAL_RCC_GetSysClockFreq+0xbc>)
 800120e:	fb02 f203 	mul.w	r2, r2, r3
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	fbb2 f3f3 	udiv	r3, r2, r3
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	e004      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	4a0c      	ldr	r2, [pc, #48]	; (8001250 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	623b      	str	r3, [r7, #32]
      break;
 800122a:	e002      	b.n	8001232 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_RCC_GetSysClockFreq+0xbc>)
 800122e:	623b      	str	r3, [r7, #32]
      break;
 8001230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001232:	6a3b      	ldr	r3, [r7, #32]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bc90      	pop	{r4, r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	0800228c 	.word	0x0800228c
 8001244:	0800229c 	.word	0x0800229c
 8001248:	40021000 	.word	0x40021000
 800124c:	007a1200 	.word	0x007a1200
 8001250:	003d0900 	.word	0x003d0900

08001254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <RCC_Delay+0x34>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <RCC_Delay+0x38>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	0a5b      	lsrs	r3, r3, #9
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001270:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	60fa      	str	r2, [r7, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f9      	bne.n	8001270 <RCC_Delay+0x1c>
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008
 800128c:	10624dd3 	.word	0x10624dd3

08001290 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <HAL_TIM_OC_Init>:
  *       Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e01d      	b.n	8001312 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fe5a 	bl	8001fa4 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3304      	adds	r3, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f000 f982 	bl	800160c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e01d      	b.n	8001368 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d106      	bne.n	8001346 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fe79 	bl	8002038 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f000 f957 	bl	800160c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fb48 	bl	8001a18 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_TIM_PWM_Start+0x4c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d107      	bne.n	80013a2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 0201 	orr.w	r2, r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40012c00 	.word	0x40012c00

080013c0 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_TIM_OC_ConfigChannel+0x1a>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e04e      	b.n	8001478 <HAL_TIM_OC_ConfigChannel+0xb8>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2202      	movs	r2, #2
 80013e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0c      	cmp	r3, #12
 80013ee:	d839      	bhi.n	8001464 <HAL_TIM_OC_ConfigChannel+0xa4>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	08001465 	.word	0x08001465
 8001400:	08001465 	.word	0x08001465
 8001404:	08001465 	.word	0x08001465
 8001408:	0800143b 	.word	0x0800143b
 800140c:	08001465 	.word	0x08001465
 8001410:	08001465 	.word	0x08001465
 8001414:	08001465 	.word	0x08001465
 8001418:	08001449 	.word	0x08001449
 800141c:	08001465 	.word	0x08001465
 8001420:	08001465 	.word	0x08001465
 8001424:	08001465 	.word	0x08001465
 8001428:	08001457 	.word	0x08001457
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f950 	bl	80016d8 <TIM_OC1_SetConfig>
    }
    break;
 8001438:	e015      	b.n	8001466 <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f9b5 	bl	80017b0 <TIM_OC2_SetConfig>
    }
    break;
 8001446:	e00e      	b.n	8001466 <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fa1e 	bl	8001890 <TIM_OC3_SetConfig>
    }
    break;
 8001454:	e007      	b.n	8001466 <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa87 	bl	8001970 <TIM_OC4_SetConfig>
    }
    break;
 8001462:	e000      	b.n	8001466 <HAL_TIM_OC_ConfigChannel+0xa6>

    default:
    break;
 8001464:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001492:	2b01      	cmp	r3, #1
 8001494:	d101      	bne.n	800149a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001496:	2302      	movs	r3, #2
 8001498:	e0b4      	b.n	8001604 <HAL_TIM_PWM_ConfigChannel+0x184>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	f200 809f 	bhi.w	80015f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80014b2:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80014b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b8:	080014ed 	.word	0x080014ed
 80014bc:	080015f1 	.word	0x080015f1
 80014c0:	080015f1 	.word	0x080015f1
 80014c4:	080015f1 	.word	0x080015f1
 80014c8:	0800152d 	.word	0x0800152d
 80014cc:	080015f1 	.word	0x080015f1
 80014d0:	080015f1 	.word	0x080015f1
 80014d4:	080015f1 	.word	0x080015f1
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	080015f1 	.word	0x080015f1
 80014e0:	080015f1 	.word	0x080015f1
 80014e4:	080015f1 	.word	0x080015f1
 80014e8:	080015af 	.word	0x080015af
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8f0 	bl	80016d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0208 	orr.w	r2, r2, #8
 8001506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0204 	bic.w	r2, r2, #4
 8001516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6999      	ldr	r1, [r3, #24]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	619a      	str	r2, [r3, #24]
    }
    break;
 800152a:	e062      	b.n	80015f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f93c 	bl	80017b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	699a      	ldr	r2, [r3, #24]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6999      	ldr	r1, [r3, #24]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	021a      	lsls	r2, r3, #8
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
    }
    break;
 800156c:	e041      	b.n	80015f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68b9      	ldr	r1, [r7, #8]
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f98b 	bl	8001890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 0208 	orr.w	r2, r2, #8
 8001588:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	69da      	ldr	r2, [r3, #28]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0204 	bic.w	r2, r2, #4
 8001598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	69d9      	ldr	r1, [r3, #28]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	61da      	str	r2, [r3, #28]
    }
    break;
 80015ac:	e021      	b.n	80015f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f9db 	bl	8001970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69da      	ldr	r2, [r3, #28]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c8:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69da      	ldr	r2, [r3, #28]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69d9      	ldr	r1, [r3, #28]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	021a      	lsls	r2, r3, #8
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	61da      	str	r2, [r3, #28]
    }
    break;
 80015ee:	e000      	b.n	80015f2 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80015f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <TIM_Base_SetConfig+0xc0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d00b      	beq.n	8001640 <TIM_Base_SetConfig+0x34>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162e:	d007      	beq.n	8001640 <TIM_Base_SetConfig+0x34>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <TIM_Base_SetConfig+0xc4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d003      	beq.n	8001640 <TIM_Base_SetConfig+0x34>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <TIM_Base_SetConfig+0xc8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d108      	bne.n	8001652 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <TIM_Base_SetConfig+0xc0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d00b      	beq.n	8001672 <TIM_Base_SetConfig+0x66>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	d007      	beq.n	8001672 <TIM_Base_SetConfig+0x66>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <TIM_Base_SetConfig+0xc4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d003      	beq.n	8001672 <TIM_Base_SetConfig+0x66>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <TIM_Base_SetConfig+0xc8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d108      	bne.n	8001684 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800168a:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <TIM_Base_SetConfig+0xc0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d103      	bne.n	80016bc <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	615a      	str	r2, [r3, #20]
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40000400 	.word	0x40000400
 80016d4:	40000800 	.word	0x40000800

080016d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	f023 0201 	bic.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f023 0302 	bic.w	r3, r3, #2
 800172c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <TIM_OC1_SetConfig+0xd4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d10c      	bne.n	800175a <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f023 0308 	bic.w	r3, r3, #8
 8001746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	4313      	orrs	r3, r2
 8001750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <TIM_OC1_SetConfig+0xd4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d111      	bne.n	8001786 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	621a      	str	r2, [r3, #32]
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40012c00 	.word	0x40012c00

080017b0 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	f023 0210 	bic.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f023 0320 	bic.w	r3, r3, #32
 8001806:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <TIM_OC2_SetConfig+0xdc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d10d      	bne.n	8001838 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001836:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a14      	ldr	r2, [pc, #80]	; (800188c <TIM_OC2_SetConfig+0xdc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d113      	bne.n	8001868 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800184e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	621a      	str	r2, [r3, #32]
}
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40012c00 	.word	0x40012c00

08001890 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 0303 	bic.w	r3, r3, #3
 80018d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <TIM_OC3_SetConfig+0xdc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10d      	bne.n	8001916 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	021b      	lsls	r3, r3, #8
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001914:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <TIM_OC3_SetConfig+0xdc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d113      	bne.n	8001946 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800192c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	621a      	str	r2, [r3, #32]
}
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00

08001970 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019aa:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019c6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <TIM_OC4_SetConfig+0xa4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d109      	bne.n	80019f0 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	019b      	lsls	r3, r3, #6
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	621a      	str	r2, [r3, #32]
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	40012c00 	.word	0x40012c00

08001a18 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001a28:	2201      	movs	r2, #1
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a1a      	ldr	r2, [r3, #32]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	621a      	str	r2, [r3, #32]
}
 8001a52:	bf00      	nop
 8001a54:	371c      	adds	r7, #28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e044      	b.n	8001b02 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e032      	b.n	8001b8a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b42:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6859      	ldr	r1, [r3, #4]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b64:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9a:	f7fe fad7 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9e:	f000 f82f 	bl	8001c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba2:	f000 f965 	bl	8001e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ba6:	f000 f945 	bl	8001e34 <MX_DMA_Init>
  MX_TIM1_Init();
 8001baa:	f000 f865 	bl	8001c78 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001bae:	f000 f8e9 	bl	8001d84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <main+0x58>)
 8001bb6:	f7ff fbdb 	bl	8001370 <HAL_TIM_PWM_Start>
#define PATTERN_LENGTH 10
	/* in DMA step i, ODRx is set to pattern[i] bit x.
	 * Pins that are not configured as GPIO can still be used by other peripherals (alternate functions). */
	uint16_t pattern[PATTERN_LENGTH] = { 0x000f, 0x00f0, 0x0f00, 0xf000, 0x0f00, 0x00f0, 0x000f, 0x00f0, 0x0f00, 0xf000 };
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <main+0x5c>)
 8001bbc:	1d3c      	adds	r4, r7, #4
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	6023      	str	r3, [r4, #0]

	HAL_DMA_Start(&hdma_tim1_up, (uint32_t) pattern, (uint32_t) &GPIOB->ODR, PATTERN_LENGTH);
 8001bc8:	1d39      	adds	r1, r7, #4
 8001bca:	230a      	movs	r3, #10
 8001bcc:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <main+0x60>)
 8001bce:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <main+0x64>)
 8001bd0:	f7fe fc82 	bl	80004d8 <HAL_DMA_Start>
	HAL_TIM_Base_Start(&htim1);
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <main+0x68>)
 8001bd6:	f7ff fb5b 	bl	8001290 <HAL_TIM_Base_Start>
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <main+0x68>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <main+0x68>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001be8:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001bea:	e7fe      	b.n	8001bea <main+0x56>
 8001bec:	2000002c 	.word	0x2000002c
 8001bf0:	080022a0 	.word	0x080022a0
 8001bf4:	40010c0c 	.word	0x40010c0c
 8001bf8:	200000ac 	.word	0x200000ac
 8001bfc:	2000006c 	.word	0x2000006c

08001c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b090      	sub	sp, #64	; 0x40
 8001c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	2228      	movs	r2, #40	; 0x28
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fb28 	bl	8002264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c26:	2301      	movs	r3, #1
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe ff3a 	bl	8000ab0 <HAL_RCC_OscConfig>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001c42:	f000 f977 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c46:	230f      	movs	r3, #15
 8001c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f98a 	bl	8000f78 <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c6a:	f000 f963 	bl	8001f34 <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3740      	adds	r7, #64	; 0x40
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	; 0x40
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	615a      	str	r2, [r3, #20]
 8001cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cb0:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <MX_TIM1_Init+0x108>)
 8001cb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001cdc:	4827      	ldr	r0, [pc, #156]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cde:	f7ff faf1 	bl	80012c4 <HAL_TIM_OC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ce8:	f000 f924 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4820      	ldr	r0, [pc, #128]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001cfc:	f7ff ff06 	bl	8001b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001d06:	f000 f915 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 499;
 8001d0e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001d12:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4812      	ldr	r0, [pc, #72]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001d32:	f7ff fb45 	bl	80013c0 <HAL_TIM_OC_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001d3c:	f000 f8fa 	bl	8001f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_TIM1_Init+0x104>)
 8001d64:	f7ff fe7a 	bl	8001a5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001d6e:	f000 f8e1 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	; 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000006c 	.word	0x2000006c
 8001d80:	40012c00 	.word	0x40012c00

08001d84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8a:	f107 0320 	add.w	r3, r7, #32
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <MX_TIM3_Init+0xac>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0xf;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001dae:	220f      	movs	r2, #15
 8001db0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xff;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001dba:	22ff      	movs	r2, #255	; 0xff
 8001dbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dca:	4818      	ldr	r0, [pc, #96]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001dcc:	f7ff faa5 	bl	800131a <HAL_TIM_PWM_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001dd6:	f000 f8ad 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de2:	f107 0320 	add.w	r3, r7, #32
 8001de6:	4619      	mov	r1, r3
 8001de8:	4810      	ldr	r0, [pc, #64]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001dea:	f7ff fe8f 	bl	8001b0c <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001df4:	f000 f89e 	bl	8001f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df8:	2360      	movs	r3, #96	; 0x60
 8001dfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0xea;
 8001dfc:	23ea      	movs	r3, #234	; 0xea
 8001dfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001e10:	f7ff fb36 	bl	8001480 <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e1a:	f000 f88b 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e1e:	4803      	ldr	r0, [pc, #12]	; (8001e2c <MX_TIM3_Init+0xa8>)
 8001e20:	f000 f928 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000002c 	.word	0x2000002c
 8001e30:	40000400 	.word	0x40000400

08001e34 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6153      	str	r3, [r2, #20]
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_DMA_Init+0x38>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	200f      	movs	r0, #15
 8001e58:	f7fe faad 	bl	80003b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7fe fac6 	bl	80003ee <HAL_NVIC_EnableIRQ>

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_GPIO_Init+0xb8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed2:	4816      	ldr	r0, [pc, #88]	; (8001f2c <MX_GPIO_Init+0xbc>)
 8001ed4:	f7fe fdd4 	bl	8000a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <MX_GPIO_Init+0xc0>)
 8001ee0:	f7fe fdce 	bl	8000a80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	4619      	mov	r1, r3
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <MX_GPIO_Init+0xbc>)
 8001efe:	f7fe fc61 	bl	80007c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001f02:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001f06:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_GPIO_Init+0xc0>)
 8001f1c:	f7fe fc52 	bl	80007c4 <HAL_GPIO_Init>

}
 8001f20:	bf00      	nop
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <HAL_MspInit+0x5c>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	4a14      	ldr	r2, [pc, #80]	; (8001f9c <HAL_MspInit+0x5c>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6193      	str	r3, [r2, #24]
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_MspInit+0x5c>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_MspInit+0x5c>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_MspInit+0x5c>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_MspInit+0x5c>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_MspInit+0x60>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_MspInit+0x60>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000

08001fa4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_TIM_OC_MspInit+0x84>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d133      	bne.n	800201e <HAL_TIM_OC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_TIM_OC_MspInit+0x88>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_TIM_OC_MspInit+0x88>)
 8001fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_TIM_OC_MspInit+0x88>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <HAL_TIM_OC_MspInit+0x90>)
 8001fd2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fec:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002002:	480b      	ldr	r0, [pc, #44]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8002004:	f7fe fa0e 	bl	8000424 <HAL_DMA_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_TIM_OC_MspInit+0x6e>
    {
      Error_Handler();
 800200e:	f7ff ff91 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 8002016:	621a      	str	r2, [r3, #32]
 8002018:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_TIM_OC_MspInit+0x8c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000
 8002030:	200000ac 	.word	0x200000ac
 8002034:	40020058 	.word	0x40020058

08002038 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_TIM_PWM_MspInit+0x34>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10b      	bne.n	8002062 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_TIM_PWM_MspInit+0x38>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_TIM_PWM_MspInit+0x38>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	61d3      	str	r3, [r2, #28]
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_TIM_PWM_MspInit+0x38>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40000400 	.word	0x40000400
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_MspPostInit+0x7c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d129      	bne.n	80020e8 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_TIM_MspPostInit+0x80>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_TIM_MspPostInit+0x80>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_TIM_MspPostInit+0x80>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ac:	2310      	movs	r3, #16
 80020ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2302      	movs	r3, #2
 80020b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	480e      	ldr	r0, [pc, #56]	; (80020f8 <HAL_TIM_MspPostInit+0x84>)
 80020c0:	f7fe fb80 	bl	80007c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_TIM_MspPostInit+0x88>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	4a06      	ldr	r2, [pc, #24]	; (80020fc <HAL_TIM_MspPostInit+0x88>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40000400 	.word	0x40000400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010c00 	.word	0x40010c00
 80020fc:	40010000 	.word	0x40010000

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <HardFault_Handler+0x4>

08002112 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <MemManage_Handler+0x4>

08002118 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <BusFault_Handler+0x4>

0800211e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <UsageFault_Handler+0x4>

08002124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f7fe f844 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA1_Channel5_IRQHandler+0x10>)
 800215a:	f7fe f9ff 	bl	800055c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200000ac 	.word	0x200000ac

08002168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <SystemInit+0x5c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <SystemInit+0x5c>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <SystemInit+0x5c>)
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4911      	ldr	r1, [pc, #68]	; (80021c4 <SystemInit+0x5c>)
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <SystemInit+0x60>)
 8002180:	4013      	ands	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <SystemInit+0x5c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <SystemInit+0x5c>)
 800218a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <SystemInit+0x5c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <SystemInit+0x5c>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <SystemInit+0x5c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <SystemInit+0x5c>)
 80021a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SystemInit+0x5c>)
 80021ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SystemInit+0x64>)
 80021b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	40021000 	.word	0x40021000
 80021c8:	f8ff0000 	.word	0xf8ff0000
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021d2:	e003      	b.n	80021dc <LoopCopyDataInit>

080021d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021da:	3104      	adds	r1, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021e4:	d3f6      	bcc.n	80021d4 <CopyDataInit>
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021e8:	e002      	b.n	80021f0 <LoopFillZerobss>

080021ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021ec:	f842 3b04 	str.w	r3, [r2], #4

080021f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021f4:	d3f9      	bcc.n	80021ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021f6:	f7ff ffb7 	bl	8002168 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021fa:	f000 f80f 	bl	800221c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fe:	f7ff fcc9 	bl	8001b94 <main>
  bx lr
 8002202:	4770      	bx	lr
  ldr r3, =_sidata
 8002204:	080022cc 	.word	0x080022cc
  ldr r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800220c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002210:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002214:	200000f0 	.word	0x200000f0

08002218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_2_IRQHandler>
	...

0800221c <__libc_init_array>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	2500      	movs	r5, #0
 8002220:	4e0c      	ldr	r6, [pc, #48]	; (8002254 <__libc_init_array+0x38>)
 8002222:	4c0d      	ldr	r4, [pc, #52]	; (8002258 <__libc_init_array+0x3c>)
 8002224:	1ba4      	subs	r4, r4, r6
 8002226:	10a4      	asrs	r4, r4, #2
 8002228:	42a5      	cmp	r5, r4
 800222a:	d109      	bne.n	8002240 <__libc_init_array+0x24>
 800222c:	f000 f822 	bl	8002274 <_init>
 8002230:	2500      	movs	r5, #0
 8002232:	4e0a      	ldr	r6, [pc, #40]	; (800225c <__libc_init_array+0x40>)
 8002234:	4c0a      	ldr	r4, [pc, #40]	; (8002260 <__libc_init_array+0x44>)
 8002236:	1ba4      	subs	r4, r4, r6
 8002238:	10a4      	asrs	r4, r4, #2
 800223a:	42a5      	cmp	r5, r4
 800223c:	d105      	bne.n	800224a <__libc_init_array+0x2e>
 800223e:	bd70      	pop	{r4, r5, r6, pc}
 8002240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002244:	4798      	blx	r3
 8002246:	3501      	adds	r5, #1
 8002248:	e7ee      	b.n	8002228 <__libc_init_array+0xc>
 800224a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800224e:	4798      	blx	r3
 8002250:	3501      	adds	r5, #1
 8002252:	e7f2      	b.n	800223a <__libc_init_array+0x1e>
 8002254:	080022c4 	.word	0x080022c4
 8002258:	080022c4 	.word	0x080022c4
 800225c:	080022c4 	.word	0x080022c4
 8002260:	080022c8 	.word	0x080022c8

08002264 <memset>:
 8002264:	4603      	mov	r3, r0
 8002266:	4402      	add	r2, r0
 8002268:	4293      	cmp	r3, r2
 800226a:	d100      	bne.n	800226e <memset+0xa>
 800226c:	4770      	bx	lr
 800226e:	f803 1b01 	strb.w	r1, [r3], #1
 8002272:	e7f9      	b.n	8002268 <memset+0x4>

08002274 <_init>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	bf00      	nop
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr

08002280 <_fini>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr
