
blinky-bitbanding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001218  08001218  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001218  08001218  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001218  08001218  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001218  08001218  00011218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800121c  0800121c  0001121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800122c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800122c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f3a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012eb  00000000  00000000  00026f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c0  00000000  00000000  00028260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000338  00000000  00000000  00028620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013cd9  00000000  00000000  00028958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000044b2  00000000  00000000  0003c631  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000688fc  00000000  00000000  00040ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a93df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d08  00000000  00000000  000a945c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080011dc 	.word	0x080011dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080011dc 	.word	0x080011dc

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f000 ff56 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000028 	.word	0x20000028

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000028 	.word	0x20000028

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da0b      	bge.n	80002e4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <NVIC_SetPriority+0x4c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f003 030f 	and.w	r3, r3, #15
 80002d8:	3b04      	subs	r3, #4
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e2:	e009      	b.n	80002f8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <NVIC_SetPriority+0x50>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000e100 	.word	0xe000e100

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000394:	f7ff ff90 	bl	80002b8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	; 0x24
 800043e:	e127      	b.n	8000690 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000440:	2201      	movs	r2, #1
 8000442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000444:	fa02 f303 	lsl.w	r3, r2, r3
 8000448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	69fa      	ldr	r2, [r7, #28]
 8000450:	4013      	ands	r3, r2
 8000452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	429a      	cmp	r2, r3
 800045a:	f040 8116 	bne.w	800068a <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	2b12      	cmp	r3, #18
 8000464:	d034      	beq.n	80004d0 <HAL_GPIO_Init+0xb4>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d80d      	bhi.n	8000486 <HAL_GPIO_Init+0x6a>
 800046a:	2b02      	cmp	r3, #2
 800046c:	d02b      	beq.n	80004c6 <HAL_GPIO_Init+0xaa>
 800046e:	2b02      	cmp	r3, #2
 8000470:	d804      	bhi.n	800047c <HAL_GPIO_Init+0x60>
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000476:	2b01      	cmp	r3, #1
 8000478:	d01c      	beq.n	80004b4 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800047a:	e048      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800047c:	2b03      	cmp	r3, #3
 800047e:	d043      	beq.n	8000508 <HAL_GPIO_Init+0xec>
 8000480:	2b11      	cmp	r3, #17
 8000482:	d01b      	beq.n	80004bc <HAL_GPIO_Init+0xa0>
          break;
 8000484:	e043      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000486:	4a87      	ldr	r2, [pc, #540]	; (80006a4 <HAL_GPIO_Init+0x288>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d026      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 800048c:	4a85      	ldr	r2, [pc, #532]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d806      	bhi.n	80004a0 <HAL_GPIO_Init+0x84>
 8000492:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d020      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <HAL_GPIO_Init+0x290>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d01d      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 800049e:	e036      	b.n	800050e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004a0:	4a83      	ldr	r2, [pc, #524]	; (80006b0 <HAL_GPIO_Init+0x294>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d019      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004a6:	4a83      	ldr	r2, [pc, #524]	; (80006b4 <HAL_GPIO_Init+0x298>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d016      	beq.n	80004da <HAL_GPIO_Init+0xbe>
 80004ac:	4a82      	ldr	r2, [pc, #520]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d013      	beq.n	80004da <HAL_GPIO_Init+0xbe>
          break;
 80004b2:	e02c      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	623b      	str	r3, [r7, #32]
          break;
 80004ba:	e028      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	3304      	adds	r3, #4
 80004c2:	623b      	str	r3, [r7, #32]
          break;
 80004c4:	e023      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	3308      	adds	r3, #8
 80004cc:	623b      	str	r3, [r7, #32]
          break;
 80004ce:	e01e      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	330c      	adds	r3, #12
 80004d6:	623b      	str	r3, [r7, #32]
          break;
 80004d8:	e019      	b.n	800050e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d102      	bne.n	80004e8 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e2:	2304      	movs	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
          break;
 80004e6:	e012      	b.n	800050e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d105      	bne.n	80004fc <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004f0:	2308      	movs	r3, #8
 80004f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	69fa      	ldr	r2, [r7, #28]
 80004f8:	611a      	str	r2, [r3, #16]
          break;
 80004fa:	e008      	b.n	800050e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004fc:	2308      	movs	r3, #8
 80004fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	615a      	str	r2, [r3, #20]
          break;
 8000506:	e002      	b.n	800050e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
          break;
 800050c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d801      	bhi.n	8000518 <HAL_GPIO_Init+0xfc>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	e001      	b.n	800051c <HAL_GPIO_Init+0x100>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3304      	adds	r3, #4
 800051c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800051e:	69bb      	ldr	r3, [r7, #24]
 8000520:	2bff      	cmp	r3, #255	; 0xff
 8000522:	d802      	bhi.n	800052a <HAL_GPIO_Init+0x10e>
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	e002      	b.n	8000530 <HAL_GPIO_Init+0x114>
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	3b08      	subs	r3, #8
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	210f      	movs	r1, #15
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	6a39      	ldr	r1, [r7, #32]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	2b00      	cmp	r3, #0
 800055a:	f000 8096 	beq.w	800068a <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b57      	ldr	r3, [pc, #348]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a56      	ldr	r2, [pc, #344]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b54      	ldr	r3, [pc, #336]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000576:	4a52      	ldr	r2, [pc, #328]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	089b      	lsrs	r3, r3, #2
 800057c:	3302      	adds	r3, #2
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	f003 0303 	and.w	r3, r3, #3
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	220f      	movs	r2, #15
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	4013      	ands	r3, r2
 8000598:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d013      	beq.n	80005ca <HAL_GPIO_Init+0x1ae>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00d      	beq.n	80005c6 <HAL_GPIO_Init+0x1aa>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a47      	ldr	r2, [pc, #284]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d007      	beq.n	80005c2 <HAL_GPIO_Init+0x1a6>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a46      	ldr	r2, [pc, #280]	; (80006d0 <HAL_GPIO_Init+0x2b4>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d101      	bne.n	80005be <HAL_GPIO_Init+0x1a2>
 80005ba:	2303      	movs	r3, #3
 80005bc:	e006      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005be:	2304      	movs	r3, #4
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <HAL_GPIO_Init+0x1b0>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ce:	f002 0203 	and.w	r2, r2, #3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4093      	lsls	r3, r2
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4313      	orrs	r3, r2
 80005da:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80005dc:	4938      	ldr	r1, [pc, #224]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 80005de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005f6:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	4936      	ldr	r1, [pc, #216]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	4313      	orrs	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	43db      	mvns	r3, r3
 800060c:	4931      	ldr	r1, [pc, #196]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800060e:	4013      	ands	r3, r2
 8000610:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000620:	685a      	ldr	r2, [r3, #4]
 8000622:	492c      	ldr	r1, [pc, #176]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	4313      	orrs	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
 800062a:	e006      	b.n	800063a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	43db      	mvns	r3, r3
 8000634:	4927      	ldr	r1, [pc, #156]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000636:	4013      	ands	r3, r2
 8000638:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000648:	689a      	ldr	r2, [r3, #8]
 800064a:	4922      	ldr	r1, [pc, #136]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	4313      	orrs	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
 8000652:	e006      	b.n	8000662 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000656:	689a      	ldr	r2, [r3, #8]
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	43db      	mvns	r3, r3
 800065c:	491d      	ldr	r1, [pc, #116]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800065e:	4013      	ands	r3, r2
 8000660:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4918      	ldr	r1, [pc, #96]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	4313      	orrs	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
 800067a:	e006      	b.n	800068a <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	43db      	mvns	r3, r3
 8000684:	4913      	ldr	r1, [pc, #76]	; (80006d4 <HAL_GPIO_Init+0x2b8>)
 8000686:	4013      	ands	r3, r2
 8000688:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	3301      	adds	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	2b0f      	cmp	r3, #15
 8000694:	f67f aed4 	bls.w	8000440 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000698:	bf00      	nop
 800069a:	372c      	adds	r7, #44	; 0x2c
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	10210000 	.word	0x10210000
 80006a8:	10110000 	.word	0x10110000
 80006ac:	10120000 	.word	0x10120000
 80006b0:	10310000 	.word	0x10310000
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10220000 	.word	0x10220000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	40010c00 	.word	0x40010c00
 80006cc:	40011000 	.word	0x40011000
 80006d0:	40011400 	.word	0x40011400
 80006d4:	40010400 	.word	0x40010400

080006d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	807b      	strh	r3, [r7, #2]
 80006e4:	4613      	mov	r3, r2
 80006e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006e8:	787b      	ldrb	r3, [r7, #1]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d003      	beq.n	80006f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ee:	887a      	ldrh	r2, [r7, #2]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006f4:	e003      	b.n	80006fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	041a      	lsls	r2, r3, #16
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	611a      	str	r2, [r3, #16]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 8087 	beq.w	8000830 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000722:	4b92      	ldr	r3, [pc, #584]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f003 030c 	and.w	r3, r3, #12
 800072a:	2b04      	cmp	r3, #4
 800072c:	d00c      	beq.n	8000748 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800072e:	4b8f      	ldr	r3, [pc, #572]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	2b08      	cmp	r3, #8
 8000738:	d112      	bne.n	8000760 <HAL_RCC_OscConfig+0x58>
 800073a:	4b8c      	ldr	r3, [pc, #560]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000746:	d10b      	bne.n	8000760 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000748:	4b88      	ldr	r3, [pc, #544]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000750:	2b00      	cmp	r3, #0
 8000752:	d06c      	beq.n	800082e <HAL_RCC_OscConfig+0x126>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d168      	bne.n	800082e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	e22d      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000768:	d106      	bne.n	8000778 <HAL_RCC_OscConfig+0x70>
 800076a:	4b80      	ldr	r3, [pc, #512]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a7f      	ldr	r2, [pc, #508]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e02e      	b.n	80007d6 <HAL_RCC_OscConfig+0xce>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10c      	bne.n	800079a <HAL_RCC_OscConfig+0x92>
 8000780:	4b7a      	ldr	r3, [pc, #488]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a79      	ldr	r2, [pc, #484]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b77      	ldr	r3, [pc, #476]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a76      	ldr	r2, [pc, #472]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	e01d      	b.n	80007d6 <HAL_RCC_OscConfig+0xce>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007a2:	d10c      	bne.n	80007be <HAL_RCC_OscConfig+0xb6>
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a70      	ldr	r2, [pc, #448]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b6e      	ldr	r3, [pc, #440]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a6d      	ldr	r2, [pc, #436]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	e00b      	b.n	80007d6 <HAL_RCC_OscConfig+0xce>
 80007be:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a6a      	ldr	r2, [pc, #424]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b68      	ldr	r3, [pc, #416]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a67      	ldr	r2, [pc, #412]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d4:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d013      	beq.n	8000806 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007de:	f7ff fd0d 	bl	80001fc <HAL_GetTick>
 80007e2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007e4:	e008      	b.n	80007f8 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007e6:	f7ff fd09 	bl	80001fc <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	2b64      	cmp	r3, #100	; 0x64
 80007f2:	d901      	bls.n	80007f8 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80007f4:	2303      	movs	r3, #3
 80007f6:	e1e1      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007f8:	4b5c      	ldr	r3, [pc, #368]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f0      	beq.n	80007e6 <HAL_RCC_OscConfig+0xde>
 8000804:	e014      	b.n	8000830 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000806:	f7ff fcf9 	bl	80001fc <HAL_GetTick>
 800080a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800080c:	e008      	b.n	8000820 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800080e:	f7ff fcf5 	bl	80001fc <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	693b      	ldr	r3, [r7, #16]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	2b64      	cmp	r3, #100	; 0x64
 800081a:	d901      	bls.n	8000820 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800081c:	2303      	movs	r3, #3
 800081e:	e1cd      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f0      	bne.n	800080e <HAL_RCC_OscConfig+0x106>
 800082c:	e000      	b.n	8000830 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800082e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d063      	beq.n	8000904 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800083c:	4b4b      	ldr	r3, [pc, #300]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00b      	beq.n	8000860 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 030c 	and.w	r3, r3, #12
 8000850:	2b08      	cmp	r3, #8
 8000852:	d11c      	bne.n	800088e <HAL_RCC_OscConfig+0x186>
 8000854:	4b45      	ldr	r3, [pc, #276]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d116      	bne.n	800088e <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <HAL_RCC_OscConfig+0x170>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d001      	beq.n	8000878 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	e1a1      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4939      	ldr	r1, [pc, #228]	; (800096c <HAL_RCC_OscConfig+0x264>)
 8000888:	4313      	orrs	r3, r2
 800088a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800088c:	e03a      	b.n	8000904 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d020      	beq.n	80008d8 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <HAL_RCC_OscConfig+0x268>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089c:	f7ff fcae 	bl	80001fc <HAL_GetTick>
 80008a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a2:	e008      	b.n	80008b6 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008a4:	f7ff fcaa 	bl	80001fc <HAL_GetTick>
 80008a8:	4602      	mov	r2, r0
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d901      	bls.n	80008b6 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e182      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f0      	beq.n	80008a4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	4926      	ldr	r1, [pc, #152]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008d2:	4313      	orrs	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]
 80008d6:	e015      	b.n	8000904 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_RCC_OscConfig+0x268>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008de:	f7ff fc8d 	bl	80001fc <HAL_GetTick>
 80008e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e4:	e008      	b.n	80008f8 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fc89 	bl	80001fc <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d901      	bls.n	80008f8 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80008f4:	2303      	movs	r3, #3
 80008f6:	e161      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <HAL_RCC_OscConfig+0x264>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1f0      	bne.n	80008e6 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	2b00      	cmp	r3, #0
 800090e:	d039      	beq.n	8000984 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d019      	beq.n	800094c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_RCC_OscConfig+0x26c>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800091e:	f7ff fc6d 	bl	80001fc <HAL_GetTick>
 8000922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000924:	e008      	b.n	8000938 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000926:	f7ff fc69 	bl	80001fc <HAL_GetTick>
 800092a:	4602      	mov	r2, r0
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d901      	bls.n	8000938 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000934:	2303      	movs	r3, #3
 8000936:	e141      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_RCC_OscConfig+0x264>)
 800093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f0      	beq.n	8000926 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f000 fab1 	bl	8000eac <RCC_Delay>
 800094a:	e01b      	b.n	8000984 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_RCC_OscConfig+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000952:	f7ff fc53 	bl	80001fc <HAL_GetTick>
 8000956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000958:	e00e      	b.n	8000978 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800095a:	f7ff fc4f 	bl	80001fc <HAL_GetTick>
 800095e:	4602      	mov	r2, r0
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	2b02      	cmp	r3, #2
 8000966:	d907      	bls.n	8000978 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000968:	2303      	movs	r3, #3
 800096a:	e127      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
 800096c:	40021000 	.word	0x40021000
 8000970:	42420000 	.word	0x42420000
 8000974:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000978:	4b92      	ldr	r3, [pc, #584]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1ea      	bne.n	800095a <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a6 	beq.w	8000ade <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000996:	4b8b      	ldr	r3, [pc, #556]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d10d      	bne.n	80009be <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b88      	ldr	r3, [pc, #544]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a87      	ldr	r2, [pc, #540]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b85      	ldr	r3, [pc, #532]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009be:	4b82      	ldr	r3, [pc, #520]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d118      	bne.n	80009fc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ca:	4b7f      	ldr	r3, [pc, #508]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a7e      	ldr	r2, [pc, #504]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009d6:	f7ff fc11 	bl	80001fc <HAL_GetTick>
 80009da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	e008      	b.n	80009f0 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009de:	f7ff fc0d 	bl	80001fc <HAL_GetTick>
 80009e2:	4602      	mov	r2, r0
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	2b64      	cmp	r3, #100	; 0x64
 80009ea:	d901      	bls.n	80009f0 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80009ec:	2303      	movs	r3, #3
 80009ee:	e0e5      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f0:	4b75      	ldr	r3, [pc, #468]	; (8000bc8 <HAL_RCC_OscConfig+0x4c0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f0      	beq.n	80009de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d106      	bne.n	8000a12 <HAL_RCC_OscConfig+0x30a>
 8000a04:	4b6f      	ldr	r3, [pc, #444]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a6e      	ldr	r2, [pc, #440]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6213      	str	r3, [r2, #32]
 8000a10:	e02d      	b.n	8000a6e <HAL_RCC_OscConfig+0x366>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10c      	bne.n	8000a34 <HAL_RCC_OscConfig+0x32c>
 8000a1a:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a69      	ldr	r2, [pc, #420]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a20:	f023 0301 	bic.w	r3, r3, #1
 8000a24:	6213      	str	r3, [r2, #32]
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4a66      	ldr	r2, [pc, #408]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a2c:	f023 0304 	bic.w	r3, r3, #4
 8000a30:	6213      	str	r3, [r2, #32]
 8000a32:	e01c      	b.n	8000a6e <HAL_RCC_OscConfig+0x366>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d10c      	bne.n	8000a56 <HAL_RCC_OscConfig+0x34e>
 8000a3c:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6213      	str	r3, [r2, #32]
 8000a48:	4b5e      	ldr	r3, [pc, #376]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4a5d      	ldr	r2, [pc, #372]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6213      	str	r3, [r2, #32]
 8000a54:	e00b      	b.n	8000a6e <HAL_RCC_OscConfig+0x366>
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4a5a      	ldr	r2, [pc, #360]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6213      	str	r3, [r2, #32]
 8000a62:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a68:	f023 0304 	bic.w	r3, r3, #4
 8000a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d015      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a76:	f7ff fbc1 	bl	80001fc <HAL_GetTick>
 8000a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a7c:	e00a      	b.n	8000a94 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fbbd 	bl	80001fc <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d901      	bls.n	8000a94 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	e093      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0ee      	beq.n	8000a7e <HAL_RCC_OscConfig+0x376>
 8000aa0:	e014      	b.n	8000acc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbab 	bl	80001fc <HAL_GetTick>
 8000aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa8:	e00a      	b.n	8000ac0 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aaa:	f7ff fba7 	bl	80001fc <HAL_GetTick>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e07d      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ee      	bne.n	8000aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d105      	bne.n	8000ade <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a3b      	ldr	r2, [pc, #236]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d069      	beq.n	8000bba <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ae6:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d061      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d146      	bne.n	8000b88 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <HAL_RCC_OscConfig+0x4c4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fb7c 	bl	80001fc <HAL_GetTick>
 8000b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b06:	e008      	b.n	8000b1a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b08:	f7ff fb78 	bl	80001fc <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d901      	bls.n	8000b1a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e050      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1f0      	bne.n	8000b08 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a1b      	ldr	r3, [r3, #32]
 8000b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b2e:	d108      	bne.n	8000b42 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4921      	ldr	r1, [pc, #132]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a19      	ldr	r1, [r3, #32]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	430b      	orrs	r3, r1
 8000b54:	491b      	ldr	r1, [pc, #108]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_RCC_OscConfig+0x4c4>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b60:	f7ff fb4c 	bl	80001fc <HAL_GetTick>
 8000b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b66:	e008      	b.n	8000b7a <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b68:	f7ff fb48 	bl	80001fc <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d901      	bls.n	8000b7a <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000b76:	2303      	movs	r3, #3
 8000b78:	e020      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f0      	beq.n	8000b68 <HAL_RCC_OscConfig+0x460>
 8000b86:	e018      	b.n	8000bba <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_RCC_OscConfig+0x4c4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b94:	e008      	b.n	8000ba8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b96:	f7ff fb31 	bl	80001fc <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d901      	bls.n	8000ba8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e009      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_RCC_OscConfig+0x4bc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f0      	bne.n	8000b96 <HAL_RCC_OscConfig+0x48e>
 8000bb4:	e001      	b.n	8000bba <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	42420060 	.word	0x42420060

08000bd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000bde:	4b7e      	ldr	r3, [pc, #504]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d910      	bls.n	8000c0e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bec:	4b7a      	ldr	r3, [pc, #488]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f023 0207 	bic.w	r2, r3, #7
 8000bf4:	4978      	ldr	r1, [pc, #480]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000bfc:	4b76      	ldr	r3, [pc, #472]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d001      	beq.n	8000c0e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e0e0      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d020      	beq.n	8000c5c <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d005      	beq.n	8000c32 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c26:	4b6d      	ldr	r3, [pc, #436]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	4a6c      	ldr	r2, [pc, #432]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c2c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c30:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c3e:	4b67      	ldr	r3, [pc, #412]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	4a66      	ldr	r2, [pc, #408]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c44:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000c48:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4a:	4b64      	ldr	r3, [pc, #400]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	4961      	ldr	r1, [pc, #388]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d06a      	beq.n	8000d3e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d107      	bne.n	8000c80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c70:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d115      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e0a7      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d107      	bne.n	8000c98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c88:	4b54      	ldr	r3, [pc, #336]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d109      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e09b      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c98:	4b50      	ldr	r3, [pc, #320]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e093      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ca8:	4b4c      	ldr	r3, [pc, #304]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f023 0203 	bic.w	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4949      	ldr	r1, [pc, #292]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cba:	f7ff fa9f 	bl	80001fc <HAL_GetTick>
 8000cbe:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d112      	bne.n	8000cee <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc8:	e00a      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f7ff fa97 	bl	80001fc <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e077      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d1ee      	bne.n	8000cca <HAL_RCC_ClockConfig+0xfa>
 8000cec:	e027      	b.n	8000d3e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d11d      	bne.n	8000d32 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cf6:	e00a      	b.n	8000d0e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf8:	f7ff fa80 	bl	80001fc <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e060      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b08      	cmp	r3, #8
 8000d18:	d1ee      	bne.n	8000cf8 <HAL_RCC_ClockConfig+0x128>
 8000d1a:	e010      	b.n	8000d3e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d1c:	f7ff fa6e 	bl	80001fc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e04e      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 030c 	and.w	r3, r3, #12
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1ee      	bne.n	8000d1c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d3e:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d210      	bcs.n	8000d6e <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 0207 	bic.w	r2, r3, #7
 8000d54:	4920      	ldr	r1, [pc, #128]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_RCC_ClockConfig+0x208>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e030      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d008      	beq.n	8000d8c <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4915      	ldr	r1, [pc, #84]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d009      	beq.n	8000dac <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000dac:	f000 f81c 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 8000db0:	4601      	mov	r1, r0
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_RCC_ClockConfig+0x20c>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	091b      	lsrs	r3, r3, #4
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_RCC_ClockConfig+0x210>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_RCC_ClockConfig+0x214>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff f9d5 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	08001208 	.word	0x08001208
 8000de4:	20000008 	.word	0x20000008

08000de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de8:	b490      	push	{r4, r7}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000df0:	1d3c      	adds	r4, r7, #4
 8000df2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d002      	beq.n	8000e28 <HAL_RCC_GetSysClockFreq+0x40>
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d003      	beq.n	8000e2e <HAL_RCC_GetSysClockFreq+0x46>
 8000e26:	e02d      	b.n	8000e84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e2a:	623b      	str	r3, [r7, #32]
      break;
 8000e2c:	e02d      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	0c5b      	lsrs	r3, r3, #17
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e60:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e66:	fb02 f203 	mul.w	r2, r2, r3
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
 8000e72:	e004      	b.n	8000e7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000e78:	fb02 f303 	mul.w	r3, r2, r3
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	623b      	str	r3, [r7, #32]
      break;
 8000e82:	e002      	b.n	8000e8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e86:	623b      	str	r3, [r7, #32]
      break;
 8000e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc90      	pop	{r4, r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	080011f4 	.word	0x080011f4
 8000e9c:	08001204 	.word	0x08001204
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	007a1200 	.word	0x007a1200
 8000ea8:	003d0900 	.word	0x003d0900

08000eac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <RCC_Delay+0x34>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <RCC_Delay+0x38>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0a5b      	lsrs	r3, r3, #9
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	fb02 f303 	mul.w	r3, r2, r3
 8000ec6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ec8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	60fa      	str	r2, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f9      	bne.n	8000ec8 <RCC_Delay+0x1c>
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	10624dd3 	.word	0x10624dd3

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eec:	f7ff f92e 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef0:	f000 f810 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef4:	f000 f84a 	bl	8000f8c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(400);
 8000ef8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000efc:	f7ff f988 	bl	8000210 <HAL_Delay>
	*((uint32_t *) 0x422201B4) ^= 1;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <main+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a02      	ldr	r2, [pc, #8]	; (8000f10 <main+0x28>)
 8000f06:	f083 0301 	eor.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
	HAL_Delay(400);
 8000f0c:	e7f4      	b.n	8000ef8 <main+0x10>
 8000f0e:	bf00      	nop
 8000f10:	422201b4 	.word	0x422201b4

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b090      	sub	sp, #64	; 0x40
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2228      	movs	r2, #40	; 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f952 	bl	80011cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fbdc 	bl	8000708 <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f56:	f000 f859 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fe2c 	bl	8000bd0 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f845 	bl	800100c <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3740      	adds	r7, #64	; 0x40
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_GPIO_Init+0x78>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a17      	ldr	r2, [pc, #92]	; (8001004 <MX_GPIO_Init+0x78>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_GPIO_Init+0x78>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_GPIO_Init+0x78>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a11      	ldr	r2, [pc, #68]	; (8001004 <MX_GPIO_Init+0x78>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_GPIO_Init+0x78>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_GPIO_Init+0x7c>)
 8000fd8:	f7ff fb7e 	bl	80006d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2302      	movs	r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_GPIO_Init+0x7c>)
 8000ff6:	f7ff fa11 	bl	800041c <HAL_GPIO_Init>

}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	40011000 	.word	0x40011000

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_MspInit+0x5c>)
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_MspInit+0x5c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6193      	str	r3, [r2, #24]
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_MspInit+0x5c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_MspInit+0x5c>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_MspInit+0x5c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_MspInit+0x5c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_MspInit+0x60>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_MspInit+0x60>)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000
 8001078:	40010000 	.word	0x40010000

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <HardFault_Handler+0x4>

0800108e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <BusFault_Handler+0x4>

0800109a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <UsageFault_Handler+0x4>

080010a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f7ff f886 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <SystemInit+0x5c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <SystemInit+0x5c>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <SystemInit+0x5c>)
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4911      	ldr	r1, [pc, #68]	; (800112c <SystemInit+0x5c>)
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SystemInit+0x60>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <SystemInit+0x5c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <SystemInit+0x5c>)
 80010f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <SystemInit+0x5c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SystemInit+0x5c>)
 8001102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <SystemInit+0x5c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <SystemInit+0x5c>)
 800110e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001112:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SystemInit+0x5c>)
 8001116:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800111a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SystemInit+0x64>)
 800111e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001122:	609a      	str	r2, [r3, #8]
#endif 
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	40021000 	.word	0x40021000
 8001130:	f8ff0000 	.word	0xf8ff0000
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001138:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800113a:	e003      	b.n	8001144 <LoopCopyDataInit>

0800113c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800113e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001140:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001142:	3104      	adds	r1, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001144:	480a      	ldr	r0, [pc, #40]	; (8001170 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001148:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800114a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800114c:	d3f6      	bcc.n	800113c <CopyDataInit>
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001150:	e002      	b.n	8001158 <LoopFillZerobss>

08001152 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001154:	f842 3b04 	str.w	r3, [r2], #4

08001158 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800115a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800115c:	d3f9      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115e:	f7ff ffb7 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f000 f80f 	bl	8001184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001166:	f7ff febf 	bl	8000ee8 <main>
  bx lr
 800116a:	4770      	bx	lr
  ldr r3, =_sidata
 800116c:	08001220 	.word	0x08001220
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001174:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001178:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800117c:	2000002c 	.word	0x2000002c

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>
	...

08001184 <__libc_init_array>:
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	2500      	movs	r5, #0
 8001188:	4e0c      	ldr	r6, [pc, #48]	; (80011bc <__libc_init_array+0x38>)
 800118a:	4c0d      	ldr	r4, [pc, #52]	; (80011c0 <__libc_init_array+0x3c>)
 800118c:	1ba4      	subs	r4, r4, r6
 800118e:	10a4      	asrs	r4, r4, #2
 8001190:	42a5      	cmp	r5, r4
 8001192:	d109      	bne.n	80011a8 <__libc_init_array+0x24>
 8001194:	f000 f822 	bl	80011dc <_init>
 8001198:	2500      	movs	r5, #0
 800119a:	4e0a      	ldr	r6, [pc, #40]	; (80011c4 <__libc_init_array+0x40>)
 800119c:	4c0a      	ldr	r4, [pc, #40]	; (80011c8 <__libc_init_array+0x44>)
 800119e:	1ba4      	subs	r4, r4, r6
 80011a0:	10a4      	asrs	r4, r4, #2
 80011a2:	42a5      	cmp	r5, r4
 80011a4:	d105      	bne.n	80011b2 <__libc_init_array+0x2e>
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
 80011a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ac:	4798      	blx	r3
 80011ae:	3501      	adds	r5, #1
 80011b0:	e7ee      	b.n	8001190 <__libc_init_array+0xc>
 80011b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011b6:	4798      	blx	r3
 80011b8:	3501      	adds	r5, #1
 80011ba:	e7f2      	b.n	80011a2 <__libc_init_array+0x1e>
 80011bc:	08001218 	.word	0x08001218
 80011c0:	08001218 	.word	0x08001218
 80011c4:	08001218 	.word	0x08001218
 80011c8:	0800121c 	.word	0x0800121c

080011cc <memset>:
 80011cc:	4603      	mov	r3, r0
 80011ce:	4402      	add	r2, r0
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d100      	bne.n	80011d6 <memset+0xa>
 80011d4:	4770      	bx	lr
 80011d6:	f803 1b01 	strb.w	r1, [r3], #1
 80011da:	e7f9      	b.n	80011d0 <memset+0x4>

080011dc <_init>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	bf00      	nop
 80011e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e2:	bc08      	pop	{r3}
 80011e4:	469e      	mov	lr, r3
 80011e6:	4770      	bx	lr

080011e8 <_fini>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	bf00      	nop
 80011ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ee:	bc08      	pop	{r3}
 80011f0:	469e      	mov	lr, r3
 80011f2:	4770      	bx	lr
