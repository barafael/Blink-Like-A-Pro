
blinky-rtos-2tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002824  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029d0  080029d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029d0  080029d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029d0  080029d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029d4  080029d4  000129d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  2000000c  080029e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  080029e4  00020dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012521  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000281d  00000000  00000000  00032556  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d10  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  00035a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016814  00000000  00000000  00036690  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a444  00000000  00000000  0004cea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000770d5  00000000  00000000  000572e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce3bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000ce438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800291c 	.word	0x0800291c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	0800291c 	.word	0x0800291c

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 f8cd 	bl	8000300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f002 fada 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f002 faa0 	bl	80026b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000d74 	.word	0x20000d74

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	20000d74 	.word	0x20000d74

080001b4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f003 0307 	and.w	r3, r3, #7
 80001c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <NVIC_SetPriorityGrouping+0x44>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ca:	68ba      	ldr	r2, [r7, #8]
 80001cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001d0:	4013      	ands	r3, r2
 80001d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001e6:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <NVIC_SetPriorityGrouping+0x44>)
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	60d3      	str	r3, [r2, #12]
}
 80001ec:	bf00      	nop
 80001ee:	3714      	adds	r7, #20
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <NVIC_GetPriorityGrouping+0x18>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	0a1b      	lsrs	r3, r3, #8
 8000206:	f003 0307 	and.w	r3, r3, #7
}
 800020a:	4618      	mov	r0, r3
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4906      	ldr	r1, [pc, #24]	; (8000244 <NVIC_EnableIRQ+0x2c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	e000e100 	.word	0xe000e100

08000248 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	6039      	str	r1, [r7, #0]
 8000252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000258:	2b00      	cmp	r3, #0
 800025a:	da0b      	bge.n	8000274 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	b2da      	uxtb	r2, r3
 8000260:	490c      	ldr	r1, [pc, #48]	; (8000294 <NVIC_SetPriority+0x4c>)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	f003 030f 	and.w	r3, r3, #15
 8000268:	3b04      	subs	r3, #4
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000272:	e009      	b.n	8000288 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4907      	ldr	r1, [pc, #28]	; (8000298 <NVIC_SetPriority+0x50>)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	0112      	lsls	r2, r2, #4
 8000280:	b2d2      	uxtb	r2, r2
 8000282:	440b      	add	r3, r1
 8000284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000e100 	.word	0xe000e100

0800029c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800029c:	b480      	push	{r7}
 800029e:	b089      	sub	sp, #36	; 0x24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f003 0307 	and.w	r3, r3, #7
 80002ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b0:	69fb      	ldr	r3, [r7, #28]
 80002b2:	f1c3 0307 	rsb	r3, r3, #7
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	bf28      	it	cs
 80002ba:	2304      	movcs	r3, #4
 80002bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	3304      	adds	r3, #4
 80002c2:	2b06      	cmp	r3, #6
 80002c4:	d902      	bls.n	80002cc <NVIC_EncodePriority+0x30>
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	3b03      	subs	r3, #3
 80002ca:	e000      	b.n	80002ce <NVIC_EncodePriority+0x32>
 80002cc:	2300      	movs	r3, #0
 80002ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	fa02 f303 	lsl.w	r3, r2, r3
 80002da:	43da      	mvns	r2, r3
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	401a      	ands	r2, r3
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	fa01 f303 	lsl.w	r3, r1, r3
 80002ee:	43d9      	mvns	r1, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	4313      	orrs	r3, r2
         );
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3724      	adds	r7, #36	; 0x24
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ff53 	bl	80001b4 <NVIC_SetPriorityGrouping>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000316:	b580      	push	{r7, lr}
 8000318:	b086      	sub	sp, #24
 800031a:	af00      	add	r7, sp, #0
 800031c:	4603      	mov	r3, r0
 800031e:	60b9      	str	r1, [r7, #8]
 8000320:	607a      	str	r2, [r7, #4]
 8000322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000328:	f7ff ff68 	bl	80001fc <NVIC_GetPriorityGrouping>
 800032c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	68b9      	ldr	r1, [r7, #8]
 8000332:	6978      	ldr	r0, [r7, #20]
 8000334:	f7ff ffb2 	bl	800029c <NVIC_EncodePriority>
 8000338:	4602      	mov	r2, r0
 800033a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff81 	bl	8000248 <NVIC_SetPriority>
}
 8000346:	bf00      	nop
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	4603      	mov	r3, r0
 8000356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff5b 	bl	8000218 <NVIC_EnableIRQ>
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
	...

0800036c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800036c:	b480      	push	{r7}
 800036e:	b08b      	sub	sp, #44	; 0x2c
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000376:	2300      	movs	r3, #0
 8000378:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000382:	2300      	movs	r3, #0
 8000384:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	; 0x24
 800038e:	e127      	b.n	80005e0 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000390:	2201      	movs	r2, #1
 8000392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	69fa      	ldr	r2, [r7, #28]
 80003a0:	4013      	ands	r3, r2
 80003a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80003a4:	69ba      	ldr	r2, [r7, #24]
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	f040 8116 	bne.w	80005da <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	2b12      	cmp	r3, #18
 80003b4:	d034      	beq.n	8000420 <HAL_GPIO_Init+0xb4>
 80003b6:	2b12      	cmp	r3, #18
 80003b8:	d80d      	bhi.n	80003d6 <HAL_GPIO_Init+0x6a>
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d02b      	beq.n	8000416 <HAL_GPIO_Init+0xaa>
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d804      	bhi.n	80003cc <HAL_GPIO_Init+0x60>
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d031      	beq.n	800042a <HAL_GPIO_Init+0xbe>
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d01c      	beq.n	8000404 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80003ca:	e048      	b.n	800045e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d043      	beq.n	8000458 <HAL_GPIO_Init+0xec>
 80003d0:	2b11      	cmp	r3, #17
 80003d2:	d01b      	beq.n	800040c <HAL_GPIO_Init+0xa0>
          break;
 80003d4:	e043      	b.n	800045e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80003d6:	4a87      	ldr	r2, [pc, #540]	; (80005f4 <HAL_GPIO_Init+0x288>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d026      	beq.n	800042a <HAL_GPIO_Init+0xbe>
 80003dc:	4a85      	ldr	r2, [pc, #532]	; (80005f4 <HAL_GPIO_Init+0x288>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d806      	bhi.n	80003f0 <HAL_GPIO_Init+0x84>
 80003e2:	4a85      	ldr	r2, [pc, #532]	; (80005f8 <HAL_GPIO_Init+0x28c>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d020      	beq.n	800042a <HAL_GPIO_Init+0xbe>
 80003e8:	4a84      	ldr	r2, [pc, #528]	; (80005fc <HAL_GPIO_Init+0x290>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d01d      	beq.n	800042a <HAL_GPIO_Init+0xbe>
          break;
 80003ee:	e036      	b.n	800045e <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80003f0:	4a83      	ldr	r2, [pc, #524]	; (8000600 <HAL_GPIO_Init+0x294>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d019      	beq.n	800042a <HAL_GPIO_Init+0xbe>
 80003f6:	4a83      	ldr	r2, [pc, #524]	; (8000604 <HAL_GPIO_Init+0x298>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d016      	beq.n	800042a <HAL_GPIO_Init+0xbe>
 80003fc:	4a82      	ldr	r2, [pc, #520]	; (8000608 <HAL_GPIO_Init+0x29c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d013      	beq.n	800042a <HAL_GPIO_Init+0xbe>
          break;
 8000402:	e02c      	b.n	800045e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	623b      	str	r3, [r7, #32]
          break;
 800040a:	e028      	b.n	800045e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	3304      	adds	r3, #4
 8000412:	623b      	str	r3, [r7, #32]
          break;
 8000414:	e023      	b.n	800045e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	3308      	adds	r3, #8
 800041c:	623b      	str	r3, [r7, #32]
          break;
 800041e:	e01e      	b.n	800045e <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	330c      	adds	r3, #12
 8000426:	623b      	str	r3, [r7, #32]
          break;
 8000428:	e019      	b.n	800045e <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d102      	bne.n	8000438 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000432:	2304      	movs	r3, #4
 8000434:	623b      	str	r3, [r7, #32]
          break;
 8000436:	e012      	b.n	800045e <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d105      	bne.n	800044c <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000440:	2308      	movs	r3, #8
 8000442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	69fa      	ldr	r2, [r7, #28]
 8000448:	611a      	str	r2, [r3, #16]
          break;
 800044a:	e008      	b.n	800045e <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044c:	2308      	movs	r3, #8
 800044e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	69fa      	ldr	r2, [r7, #28]
 8000454:	615a      	str	r2, [r3, #20]
          break;
 8000456:	e002      	b.n	800045e <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000458:	2300      	movs	r3, #0
 800045a:	623b      	str	r3, [r7, #32]
          break;
 800045c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800045e:	69bb      	ldr	r3, [r7, #24]
 8000460:	2bff      	cmp	r3, #255	; 0xff
 8000462:	d801      	bhi.n	8000468 <HAL_GPIO_Init+0xfc>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	e001      	b.n	800046c <HAL_GPIO_Init+0x100>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3304      	adds	r3, #4
 800046c:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	2bff      	cmp	r3, #255	; 0xff
 8000472:	d802      	bhi.n	800047a <HAL_GPIO_Init+0x10e>
 8000474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	e002      	b.n	8000480 <HAL_GPIO_Init+0x114>
 800047a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800047c:	3b08      	subs	r3, #8
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	210f      	movs	r1, #15
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	401a      	ands	r2, r3
 8000492:	6a39      	ldr	r1, [r7, #32]
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	431a      	orrs	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	f000 8096 	beq.w	80005da <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004ae:	4b57      	ldr	r3, [pc, #348]	; (800060c <HAL_GPIO_Init+0x2a0>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a56      	ldr	r2, [pc, #344]	; (800060c <HAL_GPIO_Init+0x2a0>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6193      	str	r3, [r2, #24]
 80004ba:	4b54      	ldr	r3, [pc, #336]	; (800060c <HAL_GPIO_Init+0x2a0>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80004c6:	4a52      	ldr	r2, [pc, #328]	; (8000610 <HAL_GPIO_Init+0x2a4>)
 80004c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ca:	089b      	lsrs	r3, r3, #2
 80004cc:	3302      	adds	r3, #2
 80004ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d2:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d6:	f003 0303 	and.w	r3, r3, #3
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	220f      	movs	r2, #15
 80004de:	fa02 f303 	lsl.w	r3, r2, r3
 80004e2:	43db      	mvns	r3, r3
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	4013      	ands	r3, r2
 80004e8:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a49      	ldr	r2, [pc, #292]	; (8000614 <HAL_GPIO_Init+0x2a8>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d013      	beq.n	800051a <HAL_GPIO_Init+0x1ae>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a48      	ldr	r2, [pc, #288]	; (8000618 <HAL_GPIO_Init+0x2ac>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d00d      	beq.n	8000516 <HAL_GPIO_Init+0x1aa>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a47      	ldr	r2, [pc, #284]	; (800061c <HAL_GPIO_Init+0x2b0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d007      	beq.n	8000512 <HAL_GPIO_Init+0x1a6>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a46      	ldr	r2, [pc, #280]	; (8000620 <HAL_GPIO_Init+0x2b4>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d101      	bne.n	800050e <HAL_GPIO_Init+0x1a2>
 800050a:	2303      	movs	r3, #3
 800050c:	e006      	b.n	800051c <HAL_GPIO_Init+0x1b0>
 800050e:	2304      	movs	r3, #4
 8000510:	e004      	b.n	800051c <HAL_GPIO_Init+0x1b0>
 8000512:	2302      	movs	r3, #2
 8000514:	e002      	b.n	800051c <HAL_GPIO_Init+0x1b0>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <HAL_GPIO_Init+0x1b0>
 800051a:	2300      	movs	r3, #0
 800051c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800051e:	f002 0203 	and.w	r2, r2, #3
 8000522:	0092      	lsls	r2, r2, #2
 8000524:	4093      	lsls	r3, r2
 8000526:	697a      	ldr	r2, [r7, #20]
 8000528:	4313      	orrs	r3, r2
 800052a:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 800052c:	4938      	ldr	r1, [pc, #224]	; (8000610 <HAL_GPIO_Init+0x2a4>)
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	089b      	lsrs	r3, r3, #2
 8000532:	3302      	adds	r3, #2
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d006      	beq.n	8000554 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4936      	ldr	r1, [pc, #216]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	4313      	orrs	r3, r2
 8000550:	600b      	str	r3, [r1, #0]
 8000552:	e006      	b.n	8000562 <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000554:	4b33      	ldr	r3, [pc, #204]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	43db      	mvns	r3, r3
 800055c:	4931      	ldr	r1, [pc, #196]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 800055e:	4013      	ands	r3, r2
 8000560:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d006      	beq.n	800057c <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800056e:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 8000570:	685a      	ldr	r2, [r3, #4]
 8000572:	492c      	ldr	r1, [pc, #176]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	4313      	orrs	r3, r2
 8000578:	604b      	str	r3, [r1, #4]
 800057a:	e006      	b.n	800058a <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	69bb      	ldr	r3, [r7, #24]
 8000582:	43db      	mvns	r3, r3
 8000584:	4927      	ldr	r1, [pc, #156]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 8000586:	4013      	ands	r3, r2
 8000588:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000592:	2b00      	cmp	r3, #0
 8000594:	d006      	beq.n	80005a4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	4922      	ldr	r1, [pc, #136]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	4313      	orrs	r3, r2
 80005a0:	608b      	str	r3, [r1, #8]
 80005a2:	e006      	b.n	80005b2 <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	43db      	mvns	r3, r3
 80005ac:	491d      	ldr	r1, [pc, #116]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 80005ae:	4013      	ands	r3, r2
 80005b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d006      	beq.n	80005cc <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 80005c0:	68da      	ldr	r2, [r3, #12]
 80005c2:	4918      	ldr	r1, [pc, #96]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	60cb      	str	r3, [r1, #12]
 80005ca:	e006      	b.n	80005da <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	43db      	mvns	r3, r3
 80005d4:	4913      	ldr	r1, [pc, #76]	; (8000624 <HAL_GPIO_Init+0x2b8>)
 80005d6:	4013      	ands	r3, r2
 80005d8:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	3301      	adds	r3, #1
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
 80005e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e2:	2b0f      	cmp	r3, #15
 80005e4:	f67f aed4 	bls.w	8000390 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80005e8:	bf00      	nop
 80005ea:	372c      	adds	r7, #44	; 0x2c
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	10210000 	.word	0x10210000
 80005f8:	10110000 	.word	0x10110000
 80005fc:	10120000 	.word	0x10120000
 8000600:	10310000 	.word	0x10310000
 8000604:	10320000 	.word	0x10320000
 8000608:	10220000 	.word	0x10220000
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000
 8000614:	40010800 	.word	0x40010800
 8000618:	40010c00 	.word	0x40010c00
 800061c:	40011000 	.word	0x40011000
 8000620:	40011400 	.word	0x40011400
 8000624:	40010400 	.word	0x40010400

08000628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
 8000634:	4613      	mov	r3, r2
 8000636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000638:	787b      	ldrb	r3, [r7, #1]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800063e:	887a      	ldrh	r2, [r7, #2]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000644:	e003      	b.n	800064e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000646:	887b      	ldrh	r3, [r7, #2]
 8000648:	041a      	lsls	r2, r3, #16
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	611a      	str	r2, [r3, #16]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	f000 8087 	beq.w	8000780 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000672:	4b92      	ldr	r3, [pc, #584]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	f003 030c 	and.w	r3, r3, #12
 800067a:	2b04      	cmp	r3, #4
 800067c:	d00c      	beq.n	8000698 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800067e:	4b8f      	ldr	r3, [pc, #572]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f003 030c 	and.w	r3, r3, #12
 8000686:	2b08      	cmp	r3, #8
 8000688:	d112      	bne.n	80006b0 <HAL_RCC_OscConfig+0x58>
 800068a:	4b8c      	ldr	r3, [pc, #560]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000696:	d10b      	bne.n	80006b0 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000698:	4b88      	ldr	r3, [pc, #544]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d06c      	beq.n	800077e <HAL_RCC_OscConfig+0x126>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d168      	bne.n	800077e <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e22d      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006b8:	d106      	bne.n	80006c8 <HAL_RCC_OscConfig+0x70>
 80006ba:	4b80      	ldr	r3, [pc, #512]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a7f      	ldr	r2, [pc, #508]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c4:	6013      	str	r3, [r2, #0]
 80006c6:	e02e      	b.n	8000726 <HAL_RCC_OscConfig+0xce>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d10c      	bne.n	80006ea <HAL_RCC_OscConfig+0x92>
 80006d0:	4b7a      	ldr	r3, [pc, #488]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a79      	ldr	r2, [pc, #484]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b77      	ldr	r3, [pc, #476]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a76      	ldr	r2, [pc, #472]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	e01d      	b.n	8000726 <HAL_RCC_OscConfig+0xce>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006f2:	d10c      	bne.n	800070e <HAL_RCC_OscConfig+0xb6>
 80006f4:	4b71      	ldr	r3, [pc, #452]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a70      	ldr	r2, [pc, #448]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80006fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b6e      	ldr	r3, [pc, #440]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a6d      	ldr	r2, [pc, #436]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e00b      	b.n	8000726 <HAL_RCC_OscConfig+0xce>
 800070e:	4b6b      	ldr	r3, [pc, #428]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a6a      	ldr	r2, [pc, #424]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b68      	ldr	r3, [pc, #416]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a67      	ldr	r2, [pc, #412]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000724:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d013      	beq.n	8000756 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800072e:	f7ff fd37 	bl	80001a0 <HAL_GetTick>
 8000732:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000734:	e008      	b.n	8000748 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000736:	f7ff fd33 	bl	80001a0 <HAL_GetTick>
 800073a:	4602      	mov	r2, r0
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	2b64      	cmp	r3, #100	; 0x64
 8000742:	d901      	bls.n	8000748 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000744:	2303      	movs	r3, #3
 8000746:	e1e1      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000748:	4b5c      	ldr	r3, [pc, #368]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f0      	beq.n	8000736 <HAL_RCC_OscConfig+0xde>
 8000754:	e014      	b.n	8000780 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000756:	f7ff fd23 	bl	80001a0 <HAL_GetTick>
 800075a:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800075c:	e008      	b.n	8000770 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800075e:	f7ff fd1f 	bl	80001a0 <HAL_GetTick>
 8000762:	4602      	mov	r2, r0
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	2b64      	cmp	r3, #100	; 0x64
 800076a:	d901      	bls.n	8000770 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 800076c:	2303      	movs	r3, #3
 800076e:	e1cd      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000770:	4b52      	ldr	r3, [pc, #328]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f0      	bne.n	800075e <HAL_RCC_OscConfig+0x106>
 800077c:	e000      	b.n	8000780 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800077e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	2b00      	cmp	r3, #0
 800078a:	d063      	beq.n	8000854 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800078c:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f003 030c 	and.w	r3, r3, #12
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00b      	beq.n	80007b0 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000798:	4b48      	ldr	r3, [pc, #288]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	f003 030c 	and.w	r3, r3, #12
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d11c      	bne.n	80007de <HAL_RCC_OscConfig+0x186>
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d116      	bne.n	80007de <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007b0:	4b42      	ldr	r3, [pc, #264]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d005      	beq.n	80007c8 <HAL_RCC_OscConfig+0x170>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d001      	beq.n	80007c8 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e1a1      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007c8:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4939      	ldr	r1, [pc, #228]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 80007d8:	4313      	orrs	r3, r2
 80007da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007dc:	e03a      	b.n	8000854 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d020      	beq.n	8000828 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <HAL_RCC_OscConfig+0x268>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007ec:	f7ff fcd8 	bl	80001a0 <HAL_GetTick>
 80007f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007f2:	e008      	b.n	8000806 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007f4:	f7ff fcd4 	bl	80001a0 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d901      	bls.n	8000806 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000802:	2303      	movs	r3, #3
 8000804:	e182      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f0      	beq.n	80007f4 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4926      	ldr	r1, [pc, #152]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 8000822:	4313      	orrs	r3, r2
 8000824:	600b      	str	r3, [r1, #0]
 8000826:	e015      	b.n	8000854 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <HAL_RCC_OscConfig+0x268>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800082e:	f7ff fcb7 	bl	80001a0 <HAL_GetTick>
 8000832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000834:	e008      	b.n	8000848 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000836:	f7ff fcb3 	bl	80001a0 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	2b02      	cmp	r3, #2
 8000842:	d901      	bls.n	8000848 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000844:	2303      	movs	r3, #3
 8000846:	e161      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1f0      	bne.n	8000836 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	2b00      	cmp	r3, #0
 800085e:	d039      	beq.n	80008d4 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d019      	beq.n	800089c <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <HAL_RCC_OscConfig+0x26c>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800086e:	f7ff fc97 	bl	80001a0 <HAL_GetTick>
 8000872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000874:	e008      	b.n	8000888 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000876:	f7ff fc93 	bl	80001a0 <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	2b02      	cmp	r3, #2
 8000882:	d901      	bls.n	8000888 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000884:	2303      	movs	r3, #3
 8000886:	e141      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_RCC_OscConfig+0x264>)
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	f003 0302 	and.w	r3, r3, #2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f0      	beq.n	8000876 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 faff 	bl	8000e98 <RCC_Delay>
 800089a:	e01b      	b.n	80008d4 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_RCC_OscConfig+0x26c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008a2:	f7ff fc7d 	bl	80001a0 <HAL_GetTick>
 80008a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008a8:	e00e      	b.n	80008c8 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008aa:	f7ff fc79 	bl	80001a0 <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d907      	bls.n	80008c8 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e127      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
 80008bc:	40021000 	.word	0x40021000
 80008c0:	42420000 	.word	0x42420000
 80008c4:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008c8:	4b92      	ldr	r3, [pc, #584]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80008ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008cc:	f003 0302 	and.w	r3, r3, #2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1ea      	bne.n	80008aa <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80a6 	beq.w	8000a2e <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008e6:	4b8b      	ldr	r3, [pc, #556]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10d      	bne.n	800090e <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b88      	ldr	r3, [pc, #544]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a87      	ldr	r2, [pc, #540]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b85      	ldr	r3, [pc, #532]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800090a:	2301      	movs	r3, #1
 800090c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800090e:	4b82      	ldr	r3, [pc, #520]	; (8000b18 <HAL_RCC_OscConfig+0x4c0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000916:	2b00      	cmp	r3, #0
 8000918:	d118      	bne.n	800094c <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800091a:	4b7f      	ldr	r3, [pc, #508]	; (8000b18 <HAL_RCC_OscConfig+0x4c0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a7e      	ldr	r2, [pc, #504]	; (8000b18 <HAL_RCC_OscConfig+0x4c0>)
 8000920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000926:	f7ff fc3b 	bl	80001a0 <HAL_GetTick>
 800092a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800092c:	e008      	b.n	8000940 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800092e:	f7ff fc37 	bl	80001a0 <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b64      	cmp	r3, #100	; 0x64
 800093a:	d901      	bls.n	8000940 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e0e5      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000940:	4b75      	ldr	r3, [pc, #468]	; (8000b18 <HAL_RCC_OscConfig+0x4c0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0f0      	beq.n	800092e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d106      	bne.n	8000962 <HAL_RCC_OscConfig+0x30a>
 8000954:	4b6f      	ldr	r3, [pc, #444]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	4a6e      	ldr	r2, [pc, #440]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6213      	str	r3, [r2, #32]
 8000960:	e02d      	b.n	80009be <HAL_RCC_OscConfig+0x366>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10c      	bne.n	8000984 <HAL_RCC_OscConfig+0x32c>
 800096a:	4b6a      	ldr	r3, [pc, #424]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 800096c:	6a1b      	ldr	r3, [r3, #32]
 800096e:	4a69      	ldr	r2, [pc, #420]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000970:	f023 0301 	bic.w	r3, r3, #1
 8000974:	6213      	str	r3, [r2, #32]
 8000976:	4b67      	ldr	r3, [pc, #412]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	4a66      	ldr	r2, [pc, #408]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 800097c:	f023 0304 	bic.w	r3, r3, #4
 8000980:	6213      	str	r3, [r2, #32]
 8000982:	e01c      	b.n	80009be <HAL_RCC_OscConfig+0x366>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	2b05      	cmp	r3, #5
 800098a:	d10c      	bne.n	80009a6 <HAL_RCC_OscConfig+0x34e>
 800098c:	4b61      	ldr	r3, [pc, #388]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	4a60      	ldr	r2, [pc, #384]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6213      	str	r3, [r2, #32]
 8000998:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	4a5d      	ldr	r2, [pc, #372]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6213      	str	r3, [r2, #32]
 80009a4:	e00b      	b.n	80009be <HAL_RCC_OscConfig+0x366>
 80009a6:	4b5b      	ldr	r3, [pc, #364]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80009a8:	6a1b      	ldr	r3, [r3, #32]
 80009aa:	4a5a      	ldr	r2, [pc, #360]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80009ac:	f023 0301 	bic.w	r3, r3, #1
 80009b0:	6213      	str	r3, [r2, #32]
 80009b2:	4b58      	ldr	r3, [pc, #352]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80009b4:	6a1b      	ldr	r3, [r3, #32]
 80009b6:	4a57      	ldr	r2, [pc, #348]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80009b8:	f023 0304 	bic.w	r3, r3, #4
 80009bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d015      	beq.n	80009f2 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c6:	f7ff fbeb 	bl	80001a0 <HAL_GetTick>
 80009ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009cc:	e00a      	b.n	80009e4 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ce:	f7ff fbe7 	bl	80001a0 <HAL_GetTick>
 80009d2:	4602      	mov	r2, r0
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009dc:	4293      	cmp	r3, r2
 80009de:	d901      	bls.n	80009e4 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 80009e0:	2303      	movs	r3, #3
 80009e2:	e093      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e4:	4b4b      	ldr	r3, [pc, #300]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0ee      	beq.n	80009ce <HAL_RCC_OscConfig+0x376>
 80009f0:	e014      	b.n	8000a1c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009f2:	f7ff fbd5 	bl	80001a0 <HAL_GetTick>
 80009f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009f8:	e00a      	b.n	8000a10 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fa:	f7ff fbd1 	bl	80001a0 <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d901      	bls.n	8000a10 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e07d      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a10:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d1ee      	bne.n	80009fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d105      	bne.n	8000a2e <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a22:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a3b      	ldr	r2, [pc, #236]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d069      	beq.n	8000b0a <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d061      	beq.n	8000b06 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d146      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <HAL_RCC_OscConfig+0x4c4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a50:	f7ff fba6 	bl	80001a0 <HAL_GetTick>
 8000a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a56:	e008      	b.n	8000a6a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a58:	f7ff fba2 	bl	80001a0 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d901      	bls.n	8000a6a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	e050      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f0      	bne.n	8000a58 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7e:	d108      	bne.n	8000a92 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	4921      	ldr	r1, [pc, #132]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a19      	ldr	r1, [r3, #32]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	491b      	ldr	r1, [pc, #108]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_RCC_OscConfig+0x4c4>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ab0:	f7ff fb76 	bl	80001a0 <HAL_GetTick>
 8000ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ab6:	e008      	b.n	8000aca <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ab8:	f7ff fb72 	bl	80001a0 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d901      	bls.n	8000aca <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	e020      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f0      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x460>
 8000ad6:	e018      	b.n	8000b0a <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_RCC_OscConfig+0x4c4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ade:	f7ff fb5f 	bl	80001a0 <HAL_GetTick>
 8000ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ae4:	e008      	b.n	8000af8 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae6:	f7ff fb5b 	bl	80001a0 <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d901      	bls.n	8000af8 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e009      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_RCC_OscConfig+0x4bc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f0      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x48e>
 8000b04:	e001      	b.n	8000b0a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e000      	b.n	8000b0c <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40007000 	.word	0x40007000
 8000b1c:	42420060 	.word	0x42420060

08000b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b2e:	4b7e      	ldr	r3, [pc, #504]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	683a      	ldr	r2, [r7, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d910      	bls.n	8000b5e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b3c:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f023 0207 	bic.w	r2, r3, #7
 8000b44:	4978      	ldr	r1, [pc, #480]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b4c:	4b76      	ldr	r3, [pc, #472]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d001      	beq.n	8000b5e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e0e0      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d020      	beq.n	8000bac <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b76:	4b6d      	ldr	r3, [pc, #436]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4a6c      	ldr	r2, [pc, #432]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000b7c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b80:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b8e:	4b67      	ldr	r3, [pc, #412]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4a66      	ldr	r2, [pc, #408]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000b94:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000b98:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b9a:	4b64      	ldr	r3, [pc, #400]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	4961      	ldr	r1, [pc, #388]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d06a      	beq.n	8000c8e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d107      	bne.n	8000bd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc0:	4b5a      	ldr	r3, [pc, #360]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d115      	bne.n	8000bf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e0a7      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d107      	bne.n	8000be8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd8:	4b54      	ldr	r3, [pc, #336]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d109      	bne.n	8000bf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e09b      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be8:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e093      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bf8:	4b4c      	ldr	r3, [pc, #304]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f023 0203 	bic.w	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	4949      	ldr	r1, [pc, #292]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c0a:	f7ff fac9 	bl	80001a0 <HAL_GetTick>
 8000c0e:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d112      	bne.n	8000c3e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c18:	e00a      	b.n	8000c30 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1a:	f7ff fac1 	bl	80001a0 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d901      	bls.n	8000c30 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e077      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c30:	4b3e      	ldr	r3, [pc, #248]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b04      	cmp	r3, #4
 8000c3a:	d1ee      	bne.n	8000c1a <HAL_RCC_ClockConfig+0xfa>
 8000c3c:	e027      	b.n	8000c8e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d11d      	bne.n	8000c82 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c46:	e00a      	b.n	8000c5e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c48:	f7ff faaa 	bl	80001a0 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e060      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c5e:	4b33      	ldr	r3, [pc, #204]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d1ee      	bne.n	8000c48 <HAL_RCC_ClockConfig+0x128>
 8000c6a:	e010      	b.n	8000c8e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c6c:	f7ff fa98 	bl	80001a0 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e04e      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 030c 	and.w	r3, r3, #12
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1ee      	bne.n	8000c6c <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d210      	bcs.n	8000cbe <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f023 0207 	bic.w	r2, r3, #7
 8000ca4:	4920      	ldr	r1, [pc, #128]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <HAL_RCC_ClockConfig+0x208>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d001      	beq.n	8000cbe <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e030      	b.n	8000d20 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d008      	beq.n	8000cdc <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	4915      	ldr	r1, [pc, #84]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	490d      	ldr	r1, [pc, #52]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cfc:	f000 f81c 	bl	8000d38 <HAL_RCC_GetSysClockFreq>
 8000d00:	4601      	mov	r1, r0
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_RCC_ClockConfig+0x20c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	f003 030f 	and.w	r3, r3, #15
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_RCC_ClockConfig+0x210>)
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_RCC_ClockConfig+0x214>)
 8000d16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f001 fd01 	bl	8002720 <HAL_InitTick>
  
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40022000 	.word	0x40022000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	080029b8 	.word	0x080029b8
 8000d34:	20000008 	.word	0x20000008

08000d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d38:	b490      	push	{r4, r7}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000d40:	1d3c      	adds	r4, r7, #4
 8000d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d002      	beq.n	8000d78 <HAL_RCC_GetSysClockFreq+0x40>
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d003      	beq.n	8000d7e <HAL_RCC_GetSysClockFreq+0x46>
 8000d76:	e02d      	b.n	8000dd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000d7a:	623b      	str	r3, [r7, #32]
      break;
 8000d7c:	e02d      	b.n	8000dda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	0c9b      	lsrs	r3, r3, #18
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d8a:	4413      	add	r3, r2
 8000d8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	0c5b      	lsrs	r3, r3, #17
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000daa:	4413      	add	r3, r2
 8000dac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000db0:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000db6:	fb02 f203 	mul.w	r2, r2, r3
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8000dc2:	e004      	b.n	8000dce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000dc8:	fb02 f303 	mul.w	r3, r2, r3
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	623b      	str	r3, [r7, #32]
      break;
 8000dd2:	e002      	b.n	8000dda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000dd6:	623b      	str	r3, [r7, #32]
      break;
 8000dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000dda:	6a3b      	ldr	r3, [r7, #32]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc90      	pop	{r4, r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	08002934 	.word	0x08002934
 8000dec:	08002944 	.word	0x08002944
 8000df0:	40021000 	.word	0x40021000
 8000df4:	007a1200 	.word	0x007a1200
 8000df8:	003d0900 	.word	0x003d0900

08000dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e14:	f7ff fff2 	bl	8000dfc <HAL_RCC_GetHCLKFreq>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	0adb      	lsrs	r3, r3, #11
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	080029c8 	.word	0x080029c8

08000e38 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	220f      	movs	r2, #15
 8000e46:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_RCC_GetClockConfig+0x58>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_RCC_GetClockConfig+0x58>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_RCC_GetClockConfig+0x58>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_RCC_GetClockConfig+0x58>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_RCC_GetClockConfig+0x5c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0207 	and.w	r2, r3, #7
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40022000 	.word	0x40022000

08000e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <RCC_Delay+0x34>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <RCC_Delay+0x38>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	0a5b      	lsrs	r3, r3, #9
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000eb4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	60fa      	str	r2, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f9      	bne.n	8000eb4 <RCC_Delay+0x1c>
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	10624dd3 	.word	0x10624dd3

08000ed4 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e01d      	b.n	8000f22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d106      	bne.n	8000f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f815 	bl	8000f2a <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3304      	adds	r3, #4
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f000 f958 	bl	80011c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 0201 	orr.w	r2, r2, #1
 8000f52:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d122      	bne.n	8000fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d11b      	bne.n	8000fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f06f 0202 	mvn.w	r2, #2
 8000f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f8ed 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
 8000fb8:	e005      	b.n	8000fc6 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f8e0 	bl	8001180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f8ef 	bl	80011a4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d122      	bne.n	8001020 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d11b      	bne.n	8001020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f06f 0204 	mvn.w	r2, #4
 8000ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f8c3 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
 800100c:	e005      	b.n	800101a <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8b6 	bl	8001180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f8c5 	bl	80011a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691b      	ldr	r3, [r3, #16]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b08      	cmp	r3, #8
 800102c:	d122      	bne.n	8001074 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b08      	cmp	r3, #8
 800103a:	d11b      	bne.n	8001074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f06f 0208 	mvn.w	r2, #8
 8001044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2204      	movs	r2, #4
 800104a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f899 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
 8001060:	e005      	b.n	800106e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f88c 	bl	8001180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f89b 	bl	80011a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	2b10      	cmp	r3, #16
 8001080:	d122      	bne.n	80010c8 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b10      	cmp	r3, #16
 800108e:	d11b      	bne.n	80010c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f06f 0210 	mvn.w	r2, #16
 8001098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2208      	movs	r2, #8
 800109e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f86f 	bl	8001192 <HAL_TIM_IC_CaptureCallback>
 80010b4:	e005      	b.n	80010c2 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f862 	bl	8001180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 f871 	bl	80011a4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10e      	bne.n	80010f4 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d107      	bne.n	80010f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0201 	mvn.w	r2, #1
 80010ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f001 fac6 	bl	8002680 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	2b80      	cmp	r3, #128	; 0x80
 8001100:	d10e      	bne.n	8001120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110c:	2b80      	cmp	r3, #128	; 0x80
 800110e:	d107      	bne.n	8001120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001118:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f8c3 	bl	80012a6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800112a:	2b40      	cmp	r3, #64	; 0x40
 800112c:	d10e      	bne.n	800114c <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001138:	2b40      	cmp	r3, #64	; 0x40
 800113a:	d107      	bne.n	800114c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001144:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f835 	bl	80011b6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	2b20      	cmp	r3, #32
 8001158:	d10e      	bne.n	8001178 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b20      	cmp	r3, #32
 8001166:	d107      	bne.n	8001178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f06f 0220 	mvn.w	r2, #32
 8001170:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f88e 	bl	8001294 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <TIM_Base_SetConfig+0xc0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d00b      	beq.n	80011fc <TIM_Base_SetConfig+0x34>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ea:	d007      	beq.n	80011fc <TIM_Base_SetConfig+0x34>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <TIM_Base_SetConfig+0xc4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d003      	beq.n	80011fc <TIM_Base_SetConfig+0x34>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a26      	ldr	r2, [pc, #152]	; (8001290 <TIM_Base_SetConfig+0xc8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d108      	bne.n	800120e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <TIM_Base_SetConfig+0xc0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00b      	beq.n	800122e <TIM_Base_SetConfig+0x66>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800121c:	d007      	beq.n	800122e <TIM_Base_SetConfig+0x66>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <TIM_Base_SetConfig+0xc4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d003      	beq.n	800122e <TIM_Base_SetConfig+0x66>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a19      	ldr	r2, [pc, #100]	; (8001290 <TIM_Base_SetConfig+0xc8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d108      	bne.n	8001240 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001246:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4313      	orrs	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <TIM_Base_SetConfig+0xc0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d103      	bne.n	8001278 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	615a      	str	r2, [r3, #20]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40012c00 	.word	0x40012c00
 800128c:	40000400 	.word	0x40000400
 8001290:	40000800 	.word	0x40000800

08001294 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80012c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ca:	2b84      	cmp	r3, #132	; 0x84
 80012cc:	d005      	beq.n	80012da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80012ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	3303      	adds	r3, #3
 80012d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80012ea:	f000 fa4b 	bl	8001784 <vTaskStartScheduler>
  
  return osOK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685c      	ldr	r4, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800130a:	b29e      	uxth	r6, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <makeFreeRtosPriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	9301      	str	r3, [sp, #4]
 8001320:	9200      	str	r2, [sp, #0]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	4632      	mov	r2, r6
 8001326:	4629      	mov	r1, r5
 8001328:	4620      	mov	r0, r4
 800132a:	f000 f8ce 	bl	80014ca <xTaskCreate>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d001      	beq.n	8001338 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001334:	2300      	movs	r3, #0
 8001336:	e000      	b.n	800133a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001342 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <osDelay+0x18>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	e000      	b.n	800135c <osDelay+0x1a>
 800135a:	2301      	movs	r3, #1
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f9dd 	bl	800171c <vTaskDelay>
  
  return osOK;
 8001362:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f103 0208 	add.w	r2, r3, #8
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 0208 	add.w	r2, r3, #8
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f103 0208 	add.w	r2, r3, #8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800141e:	d103      	bne.n	8001428 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e00c      	b.n	8001442 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3308      	adds	r3, #8
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	e002      	b.n	8001436 <vListInsert+0x2e>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	429a      	cmp	r2, r3
 8001440:	d2f6      	bcs.n	8001430 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6892      	ldr	r2, [r2, #8]
 800148e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6852      	ldr	r2, [r2, #4]
 8001498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d103      	bne.n	80014ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1e5a      	subs	r2, r3, #1
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b08c      	sub	sp, #48	; 0x30
 80014ce:	af04      	add	r7, sp, #16
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fe04 	bl	80020ec <pvPortMalloc>
 80014e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00e      	beq.n	800150a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80014ec:	2054      	movs	r0, #84	; 0x54
 80014ee:	f000 fdfd 	bl	80020ec <pvPortMalloc>
 80014f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001500:	e005      	b.n	800150e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f000 feb4 	bl	8002270 <vPortFree>
 8001508:	e001      	b.n	800150e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	2300      	movs	r3, #0
 8001518:	9303      	str	r3, [sp, #12]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f80e 	bl	800154c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001530:	69f8      	ldr	r0, [r7, #28]
 8001532:	f000 f889 	bl	8001648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001536:	2301      	movs	r3, #1
 8001538:	61bb      	str	r3, [r7, #24]
 800153a:	e002      	b.n	8001542 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001540:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001542:	69bb      	ldr	r3, [r7, #24]
	}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001564:	3b01      	subs	r3, #1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f023 0307 	bic.w	r3, r3, #7
 8001572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001582:	f383 8811 	msr	BASEPRI, r3
 8001586:	f3bf 8f6f 	isb	sy
 800158a:	f3bf 8f4f 	dsb	sy
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e7fe      	b.n	8001590 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e012      	b.n	80015be <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	3334      	adds	r3, #52	; 0x34
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	3301      	adds	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d9e9      	bls.n	8001598 <prvInitialiseNewTask+0x4c>
 80015c4:	e000      	b.n	80015c8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80015c6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d901      	bls.n	80015da <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015d6:	2306      	movs	r3, #6
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80015e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e8:	2200      	movs	r2, #0
 80015ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ee:	3304      	adds	r3, #4
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff feda 	bl	80013aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	3318      	adds	r3, #24
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fed5 	bl	80013aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001604:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	f1c3 0207 	rsb	r2, r3, #7
 800160c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	2200      	movs	r2, #0
 800161a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	69b8      	ldr	r0, [r7, #24]
 800162a:	f000 fbdf 	bl	8001dec <pxPortInitialiseStack>
 800162e:	4602      	mov	r2, r0
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800163e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001650:	f000 fc98 	bl	8001f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <prvAddNewTaskToReadyList+0xb8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a29      	ldr	r2, [pc, #164]	; (8001700 <prvAddNewTaskToReadyList+0xb8>)
 800165c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <prvAddNewTaskToReadyList+0xbc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001666:	4a27      	ldr	r2, [pc, #156]	; (8001704 <prvAddNewTaskToReadyList+0xbc>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <prvAddNewTaskToReadyList+0xb8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d110      	bne.n	8001696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001674:	f000 faa4 	bl	8001bc0 <prvInitialiseTaskLists>
 8001678:	e00d      	b.n	8001696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800167a:	4b23      	ldr	r3, [pc, #140]	; (8001708 <prvAddNewTaskToReadyList+0xc0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <prvAddNewTaskToReadyList+0xbc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	429a      	cmp	r2, r3
 800168e:	d802      	bhi.n	8001696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <prvAddNewTaskToReadyList+0xbc>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <prvAddNewTaskToReadyList+0xc4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <prvAddNewTaskToReadyList+0xc4>)
 800169e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	2201      	movs	r2, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <prvAddNewTaskToReadyList+0xc8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <prvAddNewTaskToReadyList+0xc8>)
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4a15      	ldr	r2, [pc, #84]	; (8001714 <prvAddNewTaskToReadyList+0xcc>)
 80016c0:	441a      	add	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3304      	adds	r3, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4610      	mov	r0, r2
 80016ca:	f7ff fe7a 	bl	80013c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016ce:	f000 fc87 	bl	8001fe0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <prvAddNewTaskToReadyList+0xc0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00e      	beq.n	80016f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <prvAddNewTaskToReadyList+0xbc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <prvAddNewTaskToReadyList+0xd0>)
 80016ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	f3bf 8f4f 	dsb	sy
 80016f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000128 	.word	0x20000128
 8001704:	20000028 	.word	0x20000028
 8001708:	20000134 	.word	0x20000134
 800170c:	20000144 	.word	0x20000144
 8001710:	20000130 	.word	0x20000130
 8001714:	2000002c 	.word	0x2000002c
 8001718:	e000ed04 	.word	0xe000ed04

0800171c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d016      	beq.n	800175c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <vTaskDelay+0x60>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <vTaskDelay+0x2e>
 8001736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800173a:	f383 8811 	msr	BASEPRI, r3
 800173e:	f3bf 8f6f 	isb	sy
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	e7fe      	b.n	8001748 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800174a:	f000 f861 	bl	8001810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fae5 	bl	8001d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001756:	f000 f869 	bl	800182c <xTaskResumeAll>
 800175a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001762:	4b07      	ldr	r3, [pc, #28]	; (8001780 <vTaskDelay+0x64>)
 8001764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000150 	.word	0x20000150
 8001780:	e000ed04 	.word	0xe000ed04

08001784 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <vTaskStartScheduler+0x74>)
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2300      	movs	r3, #0
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	4919      	ldr	r1, [pc, #100]	; (80017fc <vTaskStartScheduler+0x78>)
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <vTaskStartScheduler+0x7c>)
 800179a:	f7ff fe96 	bl	80014ca <xTaskCreate>
 800179e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d115      	bne.n	80017d2 <vTaskStartScheduler+0x4e>
 80017a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017aa:	f383 8811 	msr	BASEPRI, r3
 80017ae:	f3bf 8f6f 	isb	sy
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <vTaskStartScheduler+0x80>)
 80017ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <vTaskStartScheduler+0x84>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <vTaskStartScheduler+0x88>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80017cc:	f000 fb7c 	bl	8001ec8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80017d0:	e00d      	b.n	80017ee <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d8:	d109      	bne.n	80017ee <vTaskStartScheduler+0x6a>
 80017da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017de:	f383 8811 	msr	BASEPRI, r3
 80017e2:	f3bf 8f6f 	isb	sy
 80017e6:	f3bf 8f4f 	dsb	sy
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e7fe      	b.n	80017ec <vTaskStartScheduler+0x68>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000014c 	.word	0x2000014c
 80017fc:	08002948 	.word	0x08002948
 8001800:	08001b91 	.word	0x08001b91
 8001804:	20000148 	.word	0x20000148
 8001808:	20000134 	.word	0x20000134
 800180c:	2000012c 	.word	0x2000012c

08001810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <vTaskSuspendAll+0x18>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a03      	ldr	r2, [pc, #12]	; (8001828 <vTaskSuspendAll+0x18>)
 800181c:	6013      	str	r3, [r2, #0]
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000150 	.word	0x20000150

0800182c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <xTaskResumeAll+0x114>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <xTaskResumeAll+0x2a>
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	e7fe      	b.n	8001854 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001856:	f000 fb95 	bl	8001f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <xTaskResumeAll+0x114>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	3b01      	subs	r3, #1
 8001860:	4a37      	ldr	r2, [pc, #220]	; (8001940 <xTaskResumeAll+0x114>)
 8001862:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <xTaskResumeAll+0x114>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d161      	bne.n	8001930 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <xTaskResumeAll+0x118>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05d      	beq.n	8001930 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001874:	e02e      	b.n	80018d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001876:	4b34      	ldr	r3, [pc, #208]	; (8001948 <xTaskResumeAll+0x11c>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3318      	adds	r3, #24
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fdf8 	bl	8001478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3304      	adds	r3, #4
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fdf3 	bl	8001478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	2201      	movs	r2, #1
 8001898:	409a      	lsls	r2, r3
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <xTaskResumeAll+0x120>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	4a2a      	ldr	r2, [pc, #168]	; (800194c <xTaskResumeAll+0x120>)
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <xTaskResumeAll+0x124>)
 80018b2:	441a      	add	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3304      	adds	r3, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f7ff fd81 	bl	80013c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <xTaskResumeAll+0x128>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d302      	bcc.n	80018d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <xTaskResumeAll+0x12c>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <xTaskResumeAll+0x11c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1cc      	bne.n	8001876 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80018e2:	f000 f9f9 	bl	8001cd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <xTaskResumeAll+0x130>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d010      	beq.n	8001914 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80018f2:	f000 f837 	bl	8001964 <xTaskIncrementTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <xTaskResumeAll+0x12c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3b01      	subs	r3, #1
 8001906:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f1      	bne.n	80018f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <xTaskResumeAll+0x130>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <xTaskResumeAll+0x12c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800191c:	2301      	movs	r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <xTaskResumeAll+0x134>)
 8001922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001930:	f000 fb56 	bl	8001fe0 <vPortExitCritical>

	return xAlreadyYielded;
 8001934:	68bb      	ldr	r3, [r7, #8]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000150 	.word	0x20000150
 8001944:	20000128 	.word	0x20000128
 8001948:	200000e8 	.word	0x200000e8
 800194c:	20000130 	.word	0x20000130
 8001950:	2000002c 	.word	0x2000002c
 8001954:	20000028 	.word	0x20000028
 8001958:	2000013c 	.word	0x2000013c
 800195c:	20000138 	.word	0x20000138
 8001960:	e000ed04 	.word	0xe000ed04

08001964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <xTaskIncrementTick+0x14c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 808c 	bne.w	8001a90 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001978:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <xTaskIncrementTick+0x150>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001980:	4a4c      	ldr	r2, [pc, #304]	; (8001ab4 <xTaskIncrementTick+0x150>)
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d11f      	bne.n	80019cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <xTaskIncrementTick+0x154>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <xTaskIncrementTick+0x46>
 8001996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	e7fe      	b.n	80019a8 <xTaskIncrementTick+0x44>
 80019aa:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <xTaskIncrementTick+0x154>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <xTaskIncrementTick+0x158>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <xTaskIncrementTick+0x154>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4a40      	ldr	r2, [pc, #256]	; (8001abc <xTaskIncrementTick+0x158>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b40      	ldr	r3, [pc, #256]	; (8001ac0 <xTaskIncrementTick+0x15c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <xTaskIncrementTick+0x15c>)
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	f000 f986 	bl	8001cd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019cc:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <xTaskIncrementTick+0x160>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d34d      	bcc.n	8001a72 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <xTaskIncrementTick+0x154>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <xTaskIncrementTick+0x80>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <xTaskIncrementTick+0x82>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <xTaskIncrementTick+0x160>)
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f0:	601a      	str	r2, [r3, #0]
					break;
 80019f2:	e03e      	b.n	8001a72 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <xTaskIncrementTick+0x154>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d203      	bcs.n	8001a14 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <xTaskIncrementTick+0x160>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
						break;
 8001a12:	e02e      	b.n	8001a72 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3304      	adds	r3, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fd2d 	bl	8001478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3318      	adds	r3, #24
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fd24 	bl	8001478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	2201      	movs	r2, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <xTaskIncrementTick+0x164>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <xTaskIncrementTick+0x164>)
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <xTaskIncrementTick+0x168>)
 8001a50:	441a      	add	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3304      	adds	r3, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4610      	mov	r0, r2
 8001a5a:	f7ff fcb2 	bl	80013c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <xTaskIncrementTick+0x16c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d3b4      	bcc.n	80019d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a70:	e7b1      	b.n	80019d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <xTaskIncrementTick+0x16c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	4914      	ldr	r1, [pc, #80]	; (8001acc <xTaskIncrementTick+0x168>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d907      	bls.n	8001a9a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e004      	b.n	8001a9a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <xTaskIncrementTick+0x170>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <xTaskIncrementTick+0x170>)
 8001a98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <xTaskIncrementTick+0x174>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001aa6:	697b      	ldr	r3, [r7, #20]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000150 	.word	0x20000150
 8001ab4:	2000012c 	.word	0x2000012c
 8001ab8:	200000e0 	.word	0x200000e0
 8001abc:	200000e4 	.word	0x200000e4
 8001ac0:	20000140 	.word	0x20000140
 8001ac4:	20000148 	.word	0x20000148
 8001ac8:	20000130 	.word	0x20000130
 8001acc:	2000002c 	.word	0x2000002c
 8001ad0:	20000028 	.word	0x20000028
 8001ad4:	20000138 	.word	0x20000138
 8001ad8:	2000013c 	.word	0x2000013c

08001adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <vTaskSwitchContext+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <vTaskSwitchContext+0xa4>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001af0:	e03e      	b.n	8001b70 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <vTaskSwitchContext+0xa4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <vTaskSwitchContext+0xa8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f1c3 031f 	rsb	r3, r3, #31
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	491e      	ldr	r1, [pc, #120]	; (8001b88 <vTaskSwitchContext+0xac>)
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	e7fe      	b.n	8001b34 <vTaskSwitchContext+0x58>
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <vTaskSwitchContext+0xac>)
 8001b42:	4413      	add	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3308      	adds	r3, #8
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d104      	bne.n	8001b66 <vTaskSwitchContext+0x8a>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <vTaskSwitchContext+0xb0>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000150 	.word	0x20000150
 8001b80:	2000013c 	.word	0x2000013c
 8001b84:	20000130 	.word	0x20000130
 8001b88:	2000002c 	.word	0x2000002c
 8001b8c:	20000028 	.word	0x20000028

08001b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001b98:	f000 f852 	bl	8001c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <prvIdleTask+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d9f9      	bls.n	8001b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <prvIdleTask+0x2c>)
 8001ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001bb4:	e7f0      	b.n	8001b98 <prvIdleTask+0x8>
 8001bb6:	bf00      	nop
 8001bb8:	2000002c 	.word	0x2000002c
 8001bbc:	e000ed04 	.word	0xe000ed04

08001bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e00c      	b.n	8001be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <prvInitialiseTaskLists+0x60>)
 8001bd8:	4413      	add	r3, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fbc6 	bl	800136c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d9ef      	bls.n	8001bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <prvInitialiseTaskLists+0x64>)
 8001bee:	f7ff fbbd 	bl	800136c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <prvInitialiseTaskLists+0x68>)
 8001bf4:	f7ff fbba 	bl	800136c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <prvInitialiseTaskLists+0x6c>)
 8001bfa:	f7ff fbb7 	bl	800136c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <prvInitialiseTaskLists+0x70>)
 8001c00:	f7ff fbb4 	bl	800136c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c04:	480b      	ldr	r0, [pc, #44]	; (8001c34 <prvInitialiseTaskLists+0x74>)
 8001c06:	f7ff fbb1 	bl	800136c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <prvInitialiseTaskLists+0x78>)
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <prvInitialiseTaskLists+0x64>)
 8001c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <prvInitialiseTaskLists+0x7c>)
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <prvInitialiseTaskLists+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000002c 	.word	0x2000002c
 8001c24:	200000b8 	.word	0x200000b8
 8001c28:	200000cc 	.word	0x200000cc
 8001c2c:	200000e8 	.word	0x200000e8
 8001c30:	200000fc 	.word	0x200000fc
 8001c34:	20000114 	.word	0x20000114
 8001c38:	200000e0 	.word	0x200000e0
 8001c3c:	200000e4 	.word	0x200000e4

08001c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c46:	e028      	b.n	8001c9a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001c48:	f7ff fde2 	bl	8001810 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <prvCheckTasksWaitingTermination+0x6c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001c5c:	f7ff fde6 	bl	800182c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001c66:	f000 f98d 	bl	8001f84 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <prvCheckTasksWaitingTermination+0x6c>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	3304      	adds	r3, #4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fbfe 	bl	8001478 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <prvCheckTasksWaitingTermination+0x70>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <prvCheckTasksWaitingTermination+0x70>)
 8001c84:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <prvCheckTasksWaitingTermination+0x74>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <prvCheckTasksWaitingTermination+0x74>)
 8001c8e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001c90:	f000 f9a6 	bl	8001fe0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f000 f80f 	bl	8001cb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <prvCheckTasksWaitingTermination+0x74>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1d2      	bne.n	8001c48 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200000fc 	.word	0x200000fc
 8001cb0:	20000128 	.word	0x20000128
 8001cb4:	20000110 	.word	0x20000110

08001cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fad3 	bl	8002270 <vPortFree>
			vPortFree( pxTCB );
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fad0 	bl	8002270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <prvResetNextTaskUnblockTime+0x40>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <prvResetNextTaskUnblockTime+0x14>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <prvResetNextTaskUnblockTime+0x16>
 8001cec:	2300      	movs	r3, #0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <prvResetNextTaskUnblockTime+0x44>)
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001cfa:	e008      	b.n	8001d0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <prvResetNextTaskUnblockTime+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <prvResetNextTaskUnblockTime+0x44>)
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	200000e0 	.word	0x200000e0
 8001d1c:	20000148 	.word	0x20000148

08001d20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001d2a:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fb9e 	bl	8001478 <uxListRemove>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4013      	ands	r3, r2
 8001d56:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001d58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d60:	d10a      	bne.n	8001d78 <prvAddCurrentTaskToDelayedList+0x58>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	481a      	ldr	r0, [pc, #104]	; (8001ddc <prvAddCurrentTaskToDelayedList+0xbc>)
 8001d72:	f7ff fb26 	bl	80013c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001d76:	e026      	b.n	8001dc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001d88:	68ba      	ldr	r2, [r7, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d209      	bcs.n	8001da4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f7ff fb33 	bl	8001408 <vListInsert>
}
 8001da2:	e010      	b.n	8001dc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f7ff fb29 	bl	8001408 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d202      	bcs.n	8001dc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001dc0:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6013      	str	r3, [r2, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000012c 	.word	0x2000012c
 8001dd4:	20000028 	.word	0x20000028
 8001dd8:	20000130 	.word	0x20000130
 8001ddc:	20000114 	.word	0x20000114
 8001de0:	200000e4 	.word	0x200000e4
 8001de4:	200000e0 	.word	0x200000e0
 8001de8:	20000148 	.word	0x20000148

08001dec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3b04      	subs	r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f023 0201 	bic.w	r2, r3, #1
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3b04      	subs	r3, #4
 8001e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001e1c:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <pxPortInitialiseStack+0x54>)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3b14      	subs	r3, #20
 8001e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3b20      	subs	r3, #32
 8001e32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	08001e45 	.word	0x08001e45

08001e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <prvTaskExitError+0x38>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e52:	d009      	beq.n	8001e68 <prvTaskExitError+0x24>
 8001e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	e7fe      	b.n	8001e66 <prvTaskExitError+0x22>
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8001e7a:	e7fe      	b.n	8001e7a <prvTaskExitError+0x36>
 8001e7c:	20000004 	.word	0x20000004

08001e80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <pxCurrentTCBConst2>)
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	6808      	ldr	r0, [r1, #0]
 8001e86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e8a:	f380 8809 	msr	PSP, r0
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f380 8811 	msr	BASEPRI, r0
 8001e9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001e9e:	4770      	bx	lr

08001ea0 <pxCurrentTCBConst2>:
 8001ea0:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop

08001ea8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <prvPortStartFirstTask+0x1c>)
 8001eaa:	6800      	ldr	r0, [r0, #0]
 8001eac:	6800      	ldr	r0, [r0, #0]
 8001eae:	f380 8808 	msr	MSP, r0
 8001eb2:	b662      	cpsie	i
 8001eb4:	b661      	cpsie	f
 8001eb6:	f3bf 8f4f 	dsb	sy
 8001eba:	f3bf 8f6f 	isb	sy
 8001ebe:	df00      	svc	0
 8001ec0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001ec2:	bf00      	nop
 8001ec4:	e000ed08 	.word	0xe000ed08

08001ec8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001ece:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <xPortStartScheduler+0xa8>)
 8001ed0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	22ff      	movs	r2, #255	; 0xff
 8001ede:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <xPortStartScheduler+0xac>)
 8001ef4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001efc:	e009      	b.n	8001f12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001f06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1a:	2b80      	cmp	r3, #128	; 0x80
 8001f1c:	d0ef      	beq.n	8001efe <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f30:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <xPortStartScheduler+0xb0>)
 8001f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <xPortStartScheduler+0xb4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <xPortStartScheduler+0xb4>)
 8001f42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <xPortStartScheduler+0xb4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <xPortStartScheduler+0xb4>)
 8001f4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001f54:	f000 f8b0 	bl	80020b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <xPortStartScheduler+0xb8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001f5e:	f7ff ffa3 	bl	8001ea8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001f62:	f7ff ff6f 	bl	8001e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	e000e400 	.word	0xe000e400
 8001f74:	20000154 	.word	0x20000154
 8001f78:	20000158 	.word	0x20000158
 8001f7c:	e000ed20 	.word	0xe000ed20
 8001f80:	20000004 	.word	0x20000004

08001f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <vPortEnterCritical+0x54>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <vPortEnterCritical+0x54>)
 8001fa4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <vPortEnterCritical+0x54>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10e      	bne.n	8001fcc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <vPortEnterCritical+0x58>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d009      	beq.n	8001fcc <vPortEnterCritical+0x48>
 8001fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	f3bf 8f6f 	isb	sy
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	e7fe      	b.n	8001fca <vPortEnterCritical+0x46>
	}
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	e000ed04 	.word	0xe000ed04

08001fe0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <vPortExitCritical+0x48>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <vPortExitCritical+0x22>
 8001fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	e7fe      	b.n	8002000 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <vPortExitCritical+0x48>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3b01      	subs	r3, #1
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <vPortExitCritical+0x48>)
 800200a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <vPortExitCritical+0x48>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <vPortExitCritical+0x3e>
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000004 	.word	0x20000004
 800202c:	00000000 	.word	0x00000000

08002030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002030:	f3ef 8009 	mrs	r0, PSP
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <pxCurrentTCBConst>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002040:	6010      	str	r0, [r2, #0]
 8002042:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002046:	f04f 0050 	mov.w	r0, #80	; 0x50
 800204a:	f380 8811 	msr	BASEPRI, r0
 800204e:	f7ff fd45 	bl	8001adc <vTaskSwitchContext>
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8811 	msr	BASEPRI, r0
 800205a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	6808      	ldr	r0, [r1, #0]
 8002062:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002066:	f380 8809 	msr	PSP, r0
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	4770      	bx	lr

08002070 <pxCurrentTCBConst>:
 8002070:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop

08002078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	__asm volatile
 800207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002090:	f7ff fc68 	bl	8001964 <xTaskIncrementTick>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <SysTick_Handler+0x3c>)
 800209c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	2300      	movs	r3, #0
 80020a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <vPortSetupTimerInterrupt+0x24>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	; (80020e0 <vPortSetupTimerInterrupt+0x28>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <vPortSetupTimerInterrupt+0x2c>)
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <vPortSetupTimerInterrupt+0x30>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	20000008 	.word	0x20000008
 80020e0:	10624dd3 	.word	0x10624dd3
 80020e4:	e000e014 	.word	0xe000e014
 80020e8:	e000e010 	.word	0xe000e010

080020ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80020f8:	f7ff fb8a 	bl	8001810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80020fc:	4b57      	ldr	r3, [pc, #348]	; (800225c <pvPortMalloc+0x170>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002104:	f000 f90c 	bl	8002320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002108:	4b55      	ldr	r3, [pc, #340]	; (8002260 <pvPortMalloc+0x174>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 808c 	bne.w	800222e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01c      	beq.n	8002156 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800211c:	2208      	movs	r2, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	2b00      	cmp	r3, #0
 800212c:	d013      	beq.n	8002156 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f023 0307 	bic.w	r3, r3, #7
 8002134:	3308      	adds	r3, #8
 8002136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <pvPortMalloc+0x6a>
	__asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e7fe      	b.n	8002154 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d068      	beq.n	800222e <pvPortMalloc+0x142>
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <pvPortMalloc+0x178>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d863      	bhi.n	800222e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002166:	4b40      	ldr	r3, [pc, #256]	; (8002268 <pvPortMalloc+0x17c>)
 8002168:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800216a:	4b3f      	ldr	r3, [pc, #252]	; (8002268 <pvPortMalloc+0x17c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002170:	e004      	b.n	800217c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d903      	bls.n	800218e <pvPortMalloc+0xa2>
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f1      	bne.n	8002172 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <pvPortMalloc+0x170>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002194:	429a      	cmp	r2, r3
 8002196:	d04a      	beq.n	800222e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2208      	movs	r2, #8
 800219e:	4413      	add	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad2      	subs	r2, r2, r3
 80021b2:	2308      	movs	r3, #8
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d91e      	bls.n	80021f8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d009      	beq.n	80021e0 <pvPortMalloc+0xf4>
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e7fe      	b.n	80021de <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80021f2:	69b8      	ldr	r0, [r7, #24]
 80021f4:	f000 f8f6 	bl	80023e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <pvPortMalloc+0x178>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	4a18      	ldr	r2, [pc, #96]	; (8002264 <pvPortMalloc+0x178>)
 8002204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <pvPortMalloc+0x178>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <pvPortMalloc+0x180>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d203      	bcs.n	800221a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002212:	4b14      	ldr	r3, [pc, #80]	; (8002264 <pvPortMalloc+0x178>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a15      	ldr	r2, [pc, #84]	; (800226c <pvPortMalloc+0x180>)
 8002218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <pvPortMalloc+0x174>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	431a      	orrs	r2, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800222e:	f7ff fafd 	bl	800182c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <pvPortMalloc+0x164>
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e7fe      	b.n	800224e <pvPortMalloc+0x162>
	return pvReturn;
 8002250:	69fb      	ldr	r3, [r7, #28]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000d64 	.word	0x20000d64
 8002260:	20000d70 	.word	0x20000d70
 8002264:	20000d68 	.word	0x20000d68
 8002268:	20000d5c 	.word	0x20000d5c
 800226c:	20000d6c 	.word	0x20000d6c

08002270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d046      	beq.n	8002310 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002282:	2308      	movs	r3, #8
 8002284:	425b      	negs	r3, r3
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <vPortFree+0xa8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <vPortFree+0x42>
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e7fe      	b.n	80022b0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <vPortFree+0x5e>
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	e7fe      	b.n	80022cc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <vPortFree+0xa8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d019      	beq.n	8002310 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d115      	bne.n	8002310 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <vPortFree+0xa8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80022f4:	f7ff fa8c 	bl	8001810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <vPortFree+0xac>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4413      	add	r3, r2
 8002302:	4a06      	ldr	r2, [pc, #24]	; (800231c <vPortFree+0xac>)
 8002304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002306:	6938      	ldr	r0, [r7, #16]
 8002308:	f000 f86c 	bl	80023e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800230c:	f7ff fa8e 	bl	800182c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002310:	bf00      	nop
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000d70 	.word	0x20000d70
 800231c:	20000d68 	.word	0x20000d68

08002320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002326:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800232a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <prvHeapInit+0xac>)
 800232e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00c      	beq.n	8002354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3307      	adds	r3, #7
 800233e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0307 	bic.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <prvHeapInit+0xac>)
 8002350:	4413      	add	r3, r2
 8002352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <prvHeapInit+0xb0>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800235e:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <prvHeapInit+0xb0>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4413      	add	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800236c:	2208      	movs	r2, #8
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <prvHeapInit+0xb4>)
 8002380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <prvHeapInit+0xb4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <prvHeapInit+0xb4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <prvHeapInit+0xb4>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <prvHeapInit+0xb8>)
 80023ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a09      	ldr	r2, [pc, #36]	; (80023dc <prvHeapInit+0xbc>)
 80023b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <prvHeapInit+0xc0>)
 80023ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023be:	601a      	str	r2, [r3, #0]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	2000015c 	.word	0x2000015c
 80023d0:	20000d5c 	.word	0x20000d5c
 80023d4:	20000d64 	.word	0x20000d64
 80023d8:	20000d6c 	.word	0x20000d6c
 80023dc:	20000d68 	.word	0x20000d68
 80023e0:	20000d70 	.word	0x20000d70

080023e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <prvInsertBlockIntoFreeList+0xa8>)
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e002      	b.n	80023f8 <prvInsertBlockIntoFreeList+0x14>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d8f7      	bhi.n	80023f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4413      	add	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d108      	bne.n	8002426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	441a      	add	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	441a      	add	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d118      	bne.n	800246c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <prvInsertBlockIntoFreeList+0xac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d00d      	beq.n	8002462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	e008      	b.n	8002474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <prvInsertBlockIntoFreeList+0xac>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e003      	b.n	8002474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	429a      	cmp	r2, r3
 800247a:	d002      	beq.n	8002482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	20000d5c 	.word	0x20000d5c
 8002490:	20000d64 	.word	0x20000d64

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b090      	sub	sp, #64	; 0x40
 8002498:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800249a:	f7fd fe59 	bl	8000150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800249e:	f000 f843 	bl	8002528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024a2:	f000 f87d 	bl	80025a0 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <main+0x7c>)
 80024a8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80024ac:	461d      	mov	r5, r3
 80024ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe ff19 	bl	80012f4 <osThreadCreate>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <main+0x80>)
 80024c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink_ON_task */
  osThreadDef(blink_ON_task, blink_ON, osPriorityIdle, 0, 128);
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <main+0x84>)
 80024ca:	f107 0418 	add.w	r4, r7, #24
 80024ce:	461d      	mov	r5, r3
 80024d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	6023      	str	r3, [r4, #0]
  blink_ON_taskHandle = osThreadCreate(osThread(blink_ON_task), NULL);
 80024d8:	f107 0318 	add.w	r3, r7, #24
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe ff08 	bl	80012f4 <osThreadCreate>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <main+0x88>)
 80024e8:	601a      	str	r2, [r3, #0]

  /* definition and creation of blink_OFF_task */
  osThreadDef(blink_OFF_task, blink_OFF, osPriorityIdle, 0, 128);
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <main+0x8c>)
 80024ec:	1d3c      	adds	r4, r7, #4
 80024ee:	461d      	mov	r5, r3
 80024f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	6023      	str	r3, [r4, #0]
  blink_OFF_taskHandle = osThreadCreate(osThread(blink_OFF_task), NULL);
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fef9 	bl	80012f4 <osThreadCreate>
 8002502:	4602      	mov	r2, r0
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <main+0x90>)
 8002506:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002508:	f7fe feed 	bl	80012e6 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800250c:	e7fe      	b.n	800250c <main+0x78>
 800250e:	bf00      	nop
 8002510:	0800295c 	.word	0x0800295c
 8002514:	20000d78 	.word	0x20000d78
 8002518:	08002980 	.word	0x08002980
 800251c:	20000d7c 	.word	0x20000d7c
 8002520:	080029a4 	.word	0x080029a4
 8002524:	20000d80 	.word	0x20000d80

08002528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b090      	sub	sp, #64	; 0x40
 800252c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252e:	f107 0318 	add.w	r3, r7, #24
 8002532:	2228      	movs	r2, #40	; 0x28
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f9e8 	bl	800290c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800254e:	2301      	movs	r3, #1
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002552:	2310      	movs	r3, #16
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe f87a 	bl	8000658 <HAL_RCC_OscConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800256a:	f000 f89b 	bl	80026a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800256e:	230f      	movs	r3, #15
 8002570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe faca 	bl	8000b20 <HAL_RCC_ClockConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002592:	f000 f887 	bl	80026a4 <Error_Handler>
  }
}
 8002596:	bf00      	nop
 8002598:	3740      	adds	r7, #64	; 0x40
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_GPIO_Init+0x78>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a17      	ldr	r2, [pc, #92]	; (8002618 <MX_GPIO_Init+0x78>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_GPIO_Init+0x78>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <MX_GPIO_Init+0x78>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a11      	ldr	r2, [pc, #68]	; (8002618 <MX_GPIO_Init+0x78>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_GPIO_Init+0x78>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ea:	480c      	ldr	r0, [pc, #48]	; (800261c <MX_GPIO_Init+0x7c>)
 80025ec:	f7fe f81c 	bl	8000628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2302      	movs	r3, #2
 8002600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	4619      	mov	r1, r3
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_GPIO_Init+0x7c>)
 800260a:	f7fd feaf 	bl	800036c <HAL_GPIO_Init>

}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40011000 	.word	0x40011000

08002620 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002628:	2001      	movs	r0, #1
 800262a:	f7fe fe8a 	bl	8001342 <osDelay>
 800262e:	e7fb      	b.n	8002628 <StartDefaultTask+0x8>

08002630 <blink_ON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_ON */
void blink_ON(void const * argument)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_ON */
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // active low
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800263e:	4804      	ldr	r0, [pc, #16]	; (8002650 <blink_ON+0x20>)
 8002640:	f7fd fff2 	bl	8000628 <HAL_GPIO_WritePin>
    osDelay(1000);
 8002644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002648:	f7fe fe7b 	bl	8001342 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); // active low
 800264c:	e7f4      	b.n	8002638 <blink_ON+0x8>
 800264e:	bf00      	nop
 8002650:	40011000 	.word	0x40011000

08002654 <blink_OFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_OFF */
void blink_OFF(void const * argument)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_OFF */
  osDelay(500);
 800265c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002660:	f7fe fe6f 	bl	8001342 <osDelay>
  /* Infinite loop */
  while(1)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002664:	2201      	movs	r2, #1
 8002666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800266a:	4804      	ldr	r0, [pc, #16]	; (800267c <blink_OFF+0x28>)
 800266c:	f7fd ffdc 	bl	8000628 <HAL_GPIO_WritePin>
    osDelay(1000);
 8002670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002674:	f7fe fe65 	bl	8001342 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002678:	e7f4      	b.n	8002664 <blink_OFF+0x10>
 800267a:	bf00      	nop
 800267c:	40011000 	.word	0x40011000

08002680 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002692:	f7fd fd73 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40012c00 	.word	0x40012c00

080026a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_MspInit+0x68>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	4a17      	ldr	r2, [pc, #92]	; (8002718 <HAL_MspInit+0x68>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6193      	str	r3, [r2, #24]
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_MspInit+0x68>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_MspInit+0x68>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_MspInit+0x68>)
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	61d3      	str	r3, [r2, #28]
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_MspInit+0x68>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	210f      	movs	r1, #15
 80026ea:	f06f 0001 	mvn.w	r0, #1
 80026ee:	f7fd fe12 	bl	8000316 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_MspInit+0x6c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_MspInit+0x6c>)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000

08002720 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08c      	sub	sp, #48	; 0x30
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	2019      	movs	r0, #25
 8002736:	f7fd fdee 	bl	8000316 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 800273a:	2019      	movs	r0, #25
 800273c:	f7fd fe07 	bl	800034e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_InitTick+0x9c>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_InitTick+0x9c>)
 8002746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_InitTick+0x9c>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002758:	f107 0210 	add.w	r2, r7, #16
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4611      	mov	r1, r2
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fb68 	bl	8000e38 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002768:	f7fe fb52 	bl	8000e10 <HAL_RCC_GetPCLK2Freq>
 800276c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_InitTick+0xa0>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0c9b      	lsrs	r3, r3, #18
 8002778:	3b01      	subs	r3, #1
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_InitTick+0xa4>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_InitTick+0xa8>)
 8002780:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_InitTick+0xa4>)
 8002784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002788:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800278a:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_InitTick+0xa4>)
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_InitTick+0xa4>)
 8002792:	2200      	movs	r2, #0
 8002794:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_InitTick+0xa4>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <HAL_InitTick+0xa4>)
 800279e:	f7fe fb99 	bl	8000ed4 <HAL_TIM_Base_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d104      	bne.n	80027b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80027a8:	4806      	ldr	r0, [pc, #24]	; (80027c4 <HAL_InitTick+0xa4>)
 80027aa:	f7fe fbc7 	bl	8000f3c <HAL_TIM_Base_Start_IT>
 80027ae:	4603      	mov	r3, r0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	431bde83 	.word	0x431bde83
 80027c4:	20000d84 	.word	0x20000d84
 80027c8:	40012c00 	.word	0x40012c00

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <HardFault_Handler+0x4>

080027de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <BusFault_Handler+0x4>

080027ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <UsageFault_Handler+0x4>

080027f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <TIM1_UP_IRQHandler+0x10>)
 8002802:	f7fe fbb5 	bl	8000f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000d84 	.word	0x20000d84

08002810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <SystemInit+0x5c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <SystemInit+0x5c>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <SystemInit+0x5c>)
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4911      	ldr	r1, [pc, #68]	; (800286c <SystemInit+0x5c>)
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <SystemInit+0x60>)
 8002828:	4013      	ands	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <SystemInit+0x5c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0e      	ldr	r2, [pc, #56]	; (800286c <SystemInit+0x5c>)
 8002832:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <SystemInit+0x5c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SystemInit+0x5c>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002846:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <SystemInit+0x5c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <SystemInit+0x5c>)
 800284e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002852:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SystemInit+0x5c>)
 8002856:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800285a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <SystemInit+0x64>)
 800285e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002862:	609a      	str	r2, [r3, #8]
#endif 
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	40021000 	.word	0x40021000
 8002870:	f8ff0000 	.word	0xf8ff0000
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002878:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800287a:	e003      	b.n	8002884 <LoopCopyDataInit>

0800287c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800287e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002880:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002882:	3104      	adds	r1, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002884:	480a      	ldr	r0, [pc, #40]	; (80028b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002888:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800288a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800288c:	d3f6      	bcc.n	800287c <CopyDataInit>
  ldr r2, =_sbss
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002890:	e002      	b.n	8002898 <LoopFillZerobss>

08002892 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002894:	f842 3b04 	str.w	r3, [r2], #4

08002898 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800289a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800289c:	d3f9      	bcc.n	8002892 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800289e:	f7ff ffb7 	bl	8002810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028a2:	f000 f80f 	bl	80028c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028a6:	f7ff fdf5 	bl	8002494 <main>
  bx lr
 80028aa:	4770      	bx	lr
  ldr r3, =_sidata
 80028ac:	080029d8 	.word	0x080029d8
  ldr r0, =_sdata
 80028b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80028b8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80028bc:	20000dc4 	.word	0x20000dc4

080028c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c0:	e7fe      	b.n	80028c0 <ADC1_2_IRQHandler>
	...

080028c4 <__libc_init_array>:
 80028c4:	b570      	push	{r4, r5, r6, lr}
 80028c6:	2500      	movs	r5, #0
 80028c8:	4e0c      	ldr	r6, [pc, #48]	; (80028fc <__libc_init_array+0x38>)
 80028ca:	4c0d      	ldr	r4, [pc, #52]	; (8002900 <__libc_init_array+0x3c>)
 80028cc:	1ba4      	subs	r4, r4, r6
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	42a5      	cmp	r5, r4
 80028d2:	d109      	bne.n	80028e8 <__libc_init_array+0x24>
 80028d4:	f000 f822 	bl	800291c <_init>
 80028d8:	2500      	movs	r5, #0
 80028da:	4e0a      	ldr	r6, [pc, #40]	; (8002904 <__libc_init_array+0x40>)
 80028dc:	4c0a      	ldr	r4, [pc, #40]	; (8002908 <__libc_init_array+0x44>)
 80028de:	1ba4      	subs	r4, r4, r6
 80028e0:	10a4      	asrs	r4, r4, #2
 80028e2:	42a5      	cmp	r5, r4
 80028e4:	d105      	bne.n	80028f2 <__libc_init_array+0x2e>
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ec:	4798      	blx	r3
 80028ee:	3501      	adds	r5, #1
 80028f0:	e7ee      	b.n	80028d0 <__libc_init_array+0xc>
 80028f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028f6:	4798      	blx	r3
 80028f8:	3501      	adds	r5, #1
 80028fa:	e7f2      	b.n	80028e2 <__libc_init_array+0x1e>
 80028fc:	080029d0 	.word	0x080029d0
 8002900:	080029d0 	.word	0x080029d0
 8002904:	080029d0 	.word	0x080029d0
 8002908:	080029d4 	.word	0x080029d4

0800290c <memset>:
 800290c:	4603      	mov	r3, r0
 800290e:	4402      	add	r2, r0
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	f803 1b01 	strb.w	r1, [r3], #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <_init>:
 800291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291e:	bf00      	nop
 8002920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002922:	bc08      	pop	{r3}
 8002924:	469e      	mov	lr, r3
 8002926:	4770      	bx	lr

08002928 <_fini>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr
